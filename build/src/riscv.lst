GAS LISTING /tmp/ccgxMJ4d.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option nopic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB48:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** #include "../lib/console.h"
   2:src/riscv.cpp **** #include "../h/operation_codes.hpp"
   3:src/riscv.cpp **** #include "../h/riscv.hpp"
   4:src/riscv.cpp **** #include "../h/tcb.hpp"
   5:src/riscv.cpp **** #include "../h/syscall_c.hpp"
   6:src/riscv.cpp **** 
   7:src/riscv.cpp **** const uint64 ECALL_USER = 0x0000000000000008UL;
   8:src/riscv.cpp **** const uint64 ECALL_SUPER = 0x0000000000000009UL;
   9:src/riscv.cpp **** 
  10:src/riscv.cpp **** void Riscv::popSppSpie()
  11:src/riscv.cpp **** {
  12              		.loc 1 11 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  12:src/riscv.cpp ****     mc_sstatus(Riscv::SSTATUS_SPP);
  20              		.loc 1 12 5
  21              	.LVL0:
  22              	.LBB92:
  23              	.LBB93:
  24              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   2:src/../h/riscv.hpp **** #define PROJECT_BASE_RISCV_HPP
   3:src/../h/riscv.hpp **** 
   4:src/../h/riscv.hpp **** #include "../lib/hw.h"
   5:src/../h/riscv.hpp **** 
   6:src/../h/riscv.hpp **** class Riscv
   7:src/../h/riscv.hpp **** {
   8:src/../h/riscv.hpp **** public:
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  11:src/../h/riscv.hpp ****     static void popSppSpie();
  12:src/../h/riscv.hpp **** 
  13:src/../h/riscv.hpp ****     // read register scause
  14:src/../h/riscv.hpp ****     static uint64 r_scause();
  15:src/../h/riscv.hpp **** 
  16:src/../h/riscv.hpp ****     // write register scause
  17:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  18:src/../h/riscv.hpp **** 
  19:src/../h/riscv.hpp ****     // read register sepc
  20:src/../h/riscv.hpp ****     static uint64 r_sepc();
  21:src/../h/riscv.hpp **** 
  22:src/../h/riscv.hpp ****     // write register sepc
GAS LISTING /tmp/ccgxMJ4d.s 			page 2


  23:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp ****     // read register stvec
  26:src/../h/riscv.hpp ****     static uint64 r_stvec();
  27:src/../h/riscv.hpp **** 
  28:src/../h/riscv.hpp ****     // write register stvec
  29:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  30:src/../h/riscv.hpp **** 
  31:src/../h/riscv.hpp ****     // read register stval
  32:src/../h/riscv.hpp ****     static uint64 r_stval();
  33:src/../h/riscv.hpp **** 
  34:src/../h/riscv.hpp ****     // write register stval
  35:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  36:src/../h/riscv.hpp **** 
  37:src/../h/riscv.hpp ****     enum BitMaskSip
  38:src/../h/riscv.hpp ****     {
  39:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  40:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  41:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  42:src/../h/riscv.hpp ****     };
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     // mask set register sip
  45:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  46:src/../h/riscv.hpp **** 
  47:src/../h/riscv.hpp ****     // mask clear register sip
  48:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  49:src/../h/riscv.hpp **** 
  50:src/../h/riscv.hpp ****     // read register sip
  51:src/../h/riscv.hpp ****     static uint64 r_sip();
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     // write register sip
  54:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  55:src/../h/riscv.hpp **** 
  56:src/../h/riscv.hpp ****     enum BitMaskSstatus
  57:src/../h/riscv.hpp ****     {
  58:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  59:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  60:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  61:src/../h/riscv.hpp ****     };
  62:src/../h/riscv.hpp **** 
  63:src/../h/riscv.hpp ****     // mask set register sstatus
  64:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  65:src/../h/riscv.hpp **** 
  66:src/../h/riscv.hpp ****     // mask clear register sstatus
  67:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  68:src/../h/riscv.hpp **** 
  69:src/../h/riscv.hpp ****     // read register sstatus
  70:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     // write register sstatus
  73:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  74:src/../h/riscv.hpp **** 
  75:src/../h/riscv.hpp ****     // supervisor trap
  76:src/../h/riscv.hpp ****     static void supervisorTrap();
  77:src/../h/riscv.hpp **** 
  78:src/../h/riscv.hpp **** private:
  79:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccgxMJ4d.s 			page 3


  80:src/../h/riscv.hpp ****     // supervisor trap handler
  81:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  82:src/../h/riscv.hpp **** 
  83:src/../h/riscv.hpp **** };
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  86:src/../h/riscv.hpp **** {
  87:src/../h/riscv.hpp ****     uint64 volatile scause;
  88:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  89:src/../h/riscv.hpp ****     return scause;
  90:src/../h/riscv.hpp **** }
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
  93:src/../h/riscv.hpp **** {
  94:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  95:src/../h/riscv.hpp **** }
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
  98:src/../h/riscv.hpp **** {
  99:src/../h/riscv.hpp ****     uint64 volatile sepc;
 100:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 101:src/../h/riscv.hpp ****     return sepc;
 102:src/../h/riscv.hpp **** }
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 105:src/../h/riscv.hpp **** {
 106:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 107:src/../h/riscv.hpp **** }
 108:src/../h/riscv.hpp **** 
 109:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 110:src/../h/riscv.hpp **** {
 111:src/../h/riscv.hpp ****     uint64 volatile stvec;
 112:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 113:src/../h/riscv.hpp ****     return stvec;
 114:src/../h/riscv.hpp **** }
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 117:src/../h/riscv.hpp **** {
 118:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 119:src/../h/riscv.hpp **** }
 120:src/../h/riscv.hpp **** 
 121:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 122:src/../h/riscv.hpp **** {
 123:src/../h/riscv.hpp ****     uint64 volatile stval;
 124:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 125:src/../h/riscv.hpp ****     return stval;
 126:src/../h/riscv.hpp **** }
 127:src/../h/riscv.hpp **** 
 128:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 129:src/../h/riscv.hpp **** {
 130:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 131:src/../h/riscv.hpp **** }
 132:src/../h/riscv.hpp **** 
 133:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 134:src/../h/riscv.hpp **** {
 135:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 136:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccgxMJ4d.s 			page 4


 137:src/../h/riscv.hpp **** 
 138:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 139:src/../h/riscv.hpp **** {
 140:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 141:src/../h/riscv.hpp **** }
 142:src/../h/riscv.hpp **** 
 143:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 144:src/../h/riscv.hpp **** {
 145:src/../h/riscv.hpp ****     uint64 volatile sip;
 146:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 147:src/../h/riscv.hpp ****     return sip;
 148:src/../h/riscv.hpp **** }
 149:src/../h/riscv.hpp **** 
 150:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 151:src/../h/riscv.hpp **** {
 152:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 153:src/../h/riscv.hpp **** }
 154:src/../h/riscv.hpp **** 
 155:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 156:src/../h/riscv.hpp **** {
 157:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 158:src/../h/riscv.hpp **** }
 159:src/../h/riscv.hpp **** 
 160:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 161:src/../h/riscv.hpp **** {
 162:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
  25              		.loc 2 162 5
  26              		.loc 2 162 68 is_stmt 0
  27 000c 93070010 		li	a5,256
  28              	#APP
  29              	# 162 "src/../h/riscv.hpp" 1
 163              	}
  30              		csrc sstatus, a5
  31              	# 0 "" 2
  32              	.LVL1:
  33              	#NO_APP
  34              	.LBE93:
  35              	.LBE92:
  13:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  36              		.loc 1 13 5 is_stmt 1
  37              		.loc 1 13 38 is_stmt 0
  38              	#APP
  39              	# 13 "src/riscv.cpp" 1
  14              	    __asm__ volatile("sret");
  40              		csrw sepc, ra
  41              	# 0 "" 2
  42              		.loc 1 14 5 is_stmt 1
  43              		.loc 1 14 29 is_stmt 0
  44              	# 14 "src/riscv.cpp" 1
  15              	}
  45              		sret
  46              	# 0 "" 2
  47              		.loc 1 15 1
  48              	#NO_APP
  49 001c 03348100 		ld	s0,8(sp)
  50              		.cfi_restore 8
  51 0020 13010101 		addi	sp,sp,16
GAS LISTING /tmp/ccgxMJ4d.s 			page 5


  52              		.cfi_def_cfa_register 2
  53 0024 67800000 		jr	ra
  54              		.cfi_endproc
  55              	.LFE48:
  57              		.align	2
  58              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  60              	_ZN5Riscv20handleSupervisorTrapEv:
  61              	.LFB49:
  16:src/riscv.cpp **** 
  17:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  18:src/riscv.cpp **** {
  62              		.loc 1 18 1 is_stmt 1
  63              		.cfi_startproc
  64 0028 130101F9 		addi	sp,sp,-112
  65              		.cfi_def_cfa_offset 112
  66 002c 23341106 		sd	ra,104(sp)
  67 0030 23308106 		sd	s0,96(sp)
  68 0034 233C9104 		sd	s1,88(sp)
  69 0038 23382105 		sd	s2,80(sp)
  70              		.cfi_offset 1, -8
  71              		.cfi_offset 8, -16
  72              		.cfi_offset 9, -24
  73              		.cfi_offset 18, -32
  74 003c 13040107 		addi	s0,sp,112
  75              		.cfi_def_cfa 8, 0
  19:src/riscv.cpp ****     uint64 scause = r_scause();
  76              		.loc 1 19 5
  77              	.LBB94:
  78              	.LBB95:
  87:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  79              		.loc 2 87 5
  88:src/../h/riscv.hpp ****     return scause;
  80              		.loc 2 88 5
  88:src/../h/riscv.hpp ****     return scause;
  81              		.loc 2 88 72 is_stmt 0
  82              	#APP
  83              	# 88 "src/../h/riscv.hpp" 1
  84              		csrr a5, scause
  85              	# 0 "" 2
  86              	#NO_APP
  87 0044 233CF4FA 		sd	a5,-72(s0)
  89:src/../h/riscv.hpp **** }
  88              		.loc 2 89 5 is_stmt 1
  89:src/../h/riscv.hpp **** }
  89              		.loc 2 89 12 is_stmt 0
  90 0048 033784FB 		ld	a4,-72(s0)
  91              	.LVL2:
  92              	.LBE95:
  93              	.LBE94:
  20:src/riscv.cpp **** 
  21:src/riscv.cpp ****     if (scause == ECALL_USER || scause == ECALL_SUPER)
  94              		.loc 1 21 5 is_stmt 1
  95              	.LBB96:
  96              		.loc 1 21 30 is_stmt 0
  97 004c 930687FF 		addi	a3,a4,-8
  98              		.loc 1 21 5
  99 0050 93071000 		li	a5,1
GAS LISTING /tmp/ccgxMJ4d.s 			page 6


 100 0054 63F8D702 		bleu	a3,a5,.L36
 101              	.LBE96:
  22:src/riscv.cpp ****     {
  23:src/riscv.cpp ****         uint64 volatile new_sepc = r_sepc() + 4;
  24:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  25:src/riscv.cpp ****         uint64 a0;
  26:src/riscv.cpp ****         __asm__ volatile("ld %0, 10*8(s0)" : "=r"(a0)); // read a0
  27:src/riscv.cpp **** 
  28:src/riscv.cpp ****         if (a0 == MEM_ALLOC)
  29:src/riscv.cpp ****         {
  30:src/riscv.cpp ****             size_t size;
  31:src/riscv.cpp ****             __asm__ volatile("ld %0, 12*8(s0)" : "=r"(size)); // read a2
  32:src/riscv.cpp ****             void *returnVal = MemoryAllocator::mem_alloc(size);
  33:src/riscv.cpp ****             __asm__ volatile("sd %0, 10*8(s0)" ::"r"(returnVal)); // store return value in a0
  34:src/riscv.cpp ****         }
  35:src/riscv.cpp ****         else if (a0 == MEM_FREE)
  36:src/riscv.cpp ****         {
  37:src/riscv.cpp ****             void *addr;
  38:src/riscv.cpp ****             __asm__ volatile("ld %0, 12*8(s0)" : "=r"(addr)); // read a2
  39:src/riscv.cpp ****             int status = MemoryAllocator::mem_free(addr);
  40:src/riscv.cpp ****             __asm__ volatile("sd %0, 10*8(s0)" ::"r"(status)); // store status in a0
  41:src/riscv.cpp ****         }
  42:src/riscv.cpp ****         else if (a0 == THREAD_CREATE)
  43:src/riscv.cpp ****         {
  44:src/riscv.cpp ****             thread_t *handle;
  45:src/riscv.cpp ****             __asm__ volatile("ld %0, 11*8(s0)" : "=r"(handle));
  46:src/riscv.cpp ****             void (*start_routine)(void *);
  47:src/riscv.cpp ****             __asm__ volatile("ld %0, 12*8(s0)" : "=r"(start_routine));
  48:src/riscv.cpp ****             void *arg;
  49:src/riscv.cpp ****             __asm__ volatile("ld %0, 13*8(s0)" : "=r"(arg));
  50:src/riscv.cpp ****             uint64 *stack;
  51:src/riscv.cpp ****             __asm__ volatile("ld %0, 14*8(s0)" : "=r"(stack));
  52:src/riscv.cpp ****             *handle = TCB::createThread((TCB::Body)start_routine, stack, arg);
  53:src/riscv.cpp **** 
  54:src/riscv.cpp ****             uint64 status = 0;
  55:src/riscv.cpp ****             if (*handle == nullptr)
  56:src/riscv.cpp ****                 status = -1;
  57:src/riscv.cpp ****             __asm__ volatile("sd %0, 10*8(s0)" ::"r"(status));
  58:src/riscv.cpp ****         }
  59:src/riscv.cpp ****         else if(a0 == THREAD_DISPATCH)
  60:src/riscv.cpp ****         {
  61:src/riscv.cpp ****             TCB::dispatch();
  62:src/riscv.cpp ****         }
  63:src/riscv.cpp ****         else if(a0 == THREAD_EXIT)
  64:src/riscv.cpp ****         {
  65:src/riscv.cpp ****             TCB::running->setFinished(true);
  66:src/riscv.cpp ****             TCB::dispatch();
  67:src/riscv.cpp ****         }
  68:src/riscv.cpp ****         else if (a0 == THREAD_SLEEP) {
  69:src/riscv.cpp ****             time_t time;
  70:src/riscv.cpp ****             __asm__ volatile("ld %0, 11*8(s0)" : "=r"(time));
  71:src/riscv.cpp ****             TCB::addToSleepingList(TCB::running, time);
  72:src/riscv.cpp ****         }
  73:src/riscv.cpp ****         else if(a0 == SEM_OPEN)
  74:src/riscv.cpp ****         {
  75:src/riscv.cpp ****             sem_t *handle;
  76:src/riscv.cpp ****             __asm__ volatile("ld %0, 11*8(s0)" : "=r"(handle));
GAS LISTING /tmp/ccgxMJ4d.s 			page 7


  77:src/riscv.cpp ****             unsigned init;
  78:src/riscv.cpp ****             __asm__ volatile("ld %0, 12*8(s0)" : "=r"(init));
  79:src/riscv.cpp ****             *handle = mySem::createSemaphore((int)init);
  80:src/riscv.cpp ****             uint64 status = 0;
  81:src/riscv.cpp ****             if (*handle == nullptr)
  82:src/riscv.cpp ****                 status = -1;
  83:src/riscv.cpp ****             __asm__ volatile("sd %0, 10*8(s0)" ::"r"(status));
  84:src/riscv.cpp ****         }
  85:src/riscv.cpp ****         else if(a0 == SEM_WAIT){
  86:src/riscv.cpp ****             sem_t id;
  87:src/riscv.cpp ****             __asm__ volatile("ld %0, 11*8(s0)" : "=r"(id));
  88:src/riscv.cpp **** 
  89:src/riscv.cpp ****             uint64 status = 0;
  90:src/riscv.cpp **** 
  91:src/riscv.cpp ****             if(id->isClosed()){
  92:src/riscv.cpp ****                 status = -1;
  93:src/riscv.cpp ****             }
  94:src/riscv.cpp ****             else{
  95:src/riscv.cpp ****                 id->wait();
  96:src/riscv.cpp ****             }
  97:src/riscv.cpp ****             __asm__ volatile("sd %0, 10*8(s0)" ::"r"(status));
  98:src/riscv.cpp ****         }
  99:src/riscv.cpp ****         else if(a0 == SEM_CLOSE){
 100:src/riscv.cpp ****             sem_t handle;
 101:src/riscv.cpp ****             __asm__ volatile("ld %0, 11*8(s0)" : "=r"(handle));
 102:src/riscv.cpp **** 
 103:src/riscv.cpp ****             uint64 status = 0;
 104:src/riscv.cpp **** 
 105:src/riscv.cpp ****             if(handle->isClosed())
 106:src/riscv.cpp ****                 status = -1;
 107:src/riscv.cpp ****             else{
 108:src/riscv.cpp ****                 handle->close();
 109:src/riscv.cpp ****             }
 110:src/riscv.cpp ****             __asm__ volatile("sd %0, 10*8(s0)" ::"r"(status));
 111:src/riscv.cpp ****         }
 112:src/riscv.cpp ****         else if (a0 == SEM_SIGNAL){
 113:src/riscv.cpp ****             sem_t handle;
 114:src/riscv.cpp ****             __asm__ volatile("ld %0, 11*8(s0)" : "=r"(handle));
 115:src/riscv.cpp **** 
 116:src/riscv.cpp ****             uint64 status = 0;
 117:src/riscv.cpp **** 
 118:src/riscv.cpp ****             if(handle->isClosed()){
 119:src/riscv.cpp ****                 status = -1;
 120:src/riscv.cpp ****             }
 121:src/riscv.cpp ****             else{
 122:src/riscv.cpp ****                 handle->signal();
 123:src/riscv.cpp ****             }
 124:src/riscv.cpp ****             __asm__ volatile("sd %0, 10*8(s0)" ::"r"(status));
 125:src/riscv.cpp ****         }
 126:src/riscv.cpp ****         else if(a0 == SEM_TIMEDWAIT) {
 127:src/riscv.cpp ****             sem_t id;
 128:src/riscv.cpp ****             __asm__ volatile("ld %0, 12*8(s0)" : "=r"(id));
 129:src/riscv.cpp ****             time_t time;
 130:src/riscv.cpp ****             __asm__ volatile("ld %0, 11*8(s0)" : "=r"(time));
 131:src/riscv.cpp **** 
 132:src/riscv.cpp ****             uint64 status = 0;
 133:src/riscv.cpp **** 
GAS LISTING /tmp/ccgxMJ4d.s 			page 8


 134:src/riscv.cpp ****             if(id->isClosed())
 135:src/riscv.cpp ****                 status = -1;
 136:src/riscv.cpp ****             else{
 137:src/riscv.cpp ****                 id->addToWaitingList(time);
 138:src/riscv.cpp ****             }
 139:src/riscv.cpp ****             __asm__ volatile("sd %0, 10*8(s0)" ::"r"(status));
 140:src/riscv.cpp **** 
 141:src/riscv.cpp ****         }
 142:src/riscv.cpp ****         else if (a0 == SEM_TRYWAIT){
 143:src/riscv.cpp ****             sem_t handle;
 144:src/riscv.cpp ****             __asm__ volatile("ld %0, 11*8(s0)" : "=r"(handle));
 145:src/riscv.cpp **** 
 146:src/riscv.cpp ****             uint64 status = 0;
 147:src/riscv.cpp **** 
 148:src/riscv.cpp ****             if(handle->isClosed()){
 149:src/riscv.cpp ****                 status = -1;
 150:src/riscv.cpp ****             }
 151:src/riscv.cpp ****             else{
 152:src/riscv.cpp ****                 status = handle->trywait();
 153:src/riscv.cpp ****             }
 154:src/riscv.cpp ****             __asm__ volatile("sd %0, 10*8(s0)" ::"r"(status));
 155:src/riscv.cpp ****         }
 156:src/riscv.cpp ****         else if(a0 == GETC){
 157:src/riscv.cpp ****             char character = __getc();
 158:src/riscv.cpp ****             __asm__ volatile("sd %0, 10*8(s0)" ::"r"(character));
 159:src/riscv.cpp ****         }
 160:src/riscv.cpp ****         else if(a0 == PUTC){
 161:src/riscv.cpp ****             char character;
 162:src/riscv.cpp ****             __asm__ volatile("ld %0, 11*8(s0)" : "=r"(character));
 163:src/riscv.cpp ****             __putc(character);
 164:src/riscv.cpp ****         }
 165:src/riscv.cpp ****         w_sstatus(sstatus);
 166:src/riscv.cpp ****         w_sepc(new_sepc);
 167:src/riscv.cpp ****     }
 168:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
 102              		.loc 1 168 10 is_stmt 1
 103              	.LBB302:
 104              	.LBB97:
 105 0058 9307F0FF 		li	a5,-1
 106 005c 9397F703 		slli	a5,a5,63
 107 0060 93871700 		addi	a5,a5,1
 108 0064 630CF72A 		beq	a4,a5,.L37
 169:src/riscv.cpp ****     {
 170:src/riscv.cpp ****         // ASYNCHRONOUS CONTEXT SWITCH - TIMER
 171:src/riscv.cpp ****         //  interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interru
 172:src/riscv.cpp ****         mc_sip(SIP_SSIP); // clear software interrupt pending
 173:src/riscv.cpp ****         TCB::timeSliceCounter++;
 174:src/riscv.cpp ****         TCB::checkSleepingList(); //wakes up sleeping threads if sleep time exceeded
 175:src/riscv.cpp ****         mySem::checkAllTimedSems(); //wakes up timed-waiting threads waitinng on semaphores
 176:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 177:src/riscv.cpp ****         {
 178:src/riscv.cpp ****             uint64 volatile sepc = r_sepc(); // dispatch will change the context
 179:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 180:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 181:src/riscv.cpp ****             TCB::dispatch();
 182:src/riscv.cpp ****             w_sstatus(sstatus);
 183:src/riscv.cpp ****             w_sepc(sepc);
GAS LISTING /tmp/ccgxMJ4d.s 			page 9


 184:src/riscv.cpp ****         }
 185:src/riscv.cpp ****     }
 186:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 109              		.loc 1 186 10
 110 0068 9307F0FF 		li	a5,-1
 111 006c 9397F703 		slli	a5,a5,63
 112 0070 93879700 		addi	a5,a5,9
 113 0074 631EF70C 		bne	a4,a5,.L3
 187:src/riscv.cpp ****     {
 188:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 189:src/riscv.cpp ****         console_handler();
 114              		.loc 1 189 9
 115              		.loc 1 189 24 is_stmt 0
 116 0078 97000000 		call	console_handler
 116      E7800000 
 117              	.LVL3:
 118              	.LBE97:
 119              	.LBE302:
 190:src/riscv.cpp ****     }
 191:src/riscv.cpp ****     else
 192:src/riscv.cpp ****     {
 193:src/riscv.cpp ****         // unexpected trap cause
 194:src/riscv.cpp ****     }
 195:src/riscv.cpp **** }
 120              		.loc 1 195 1
 121 0080 6F00000D 		j	.L3
 122              	.LVL4:
 123              	.L36:
 124              	.LBB303:
 125              	.LBB113:
  23:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 126              		.loc 1 23 9 is_stmt 1
 127              	.LBB114:
 128              	.LBB115:
  99:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 129              		.loc 2 99 5
 100:src/../h/riscv.hpp ****     return sepc;
 130              		.loc 2 100 5
 100:src/../h/riscv.hpp ****     return sepc;
 131              		.loc 2 100 64 is_stmt 0
 132              	#APP
 133              	# 100 "src/../h/riscv.hpp" 1
 134              		csrr a5, sepc
 135              	# 0 "" 2
 136              	#NO_APP
 137 0088 2334F4FC 		sd	a5,-56(s0)
 101:src/../h/riscv.hpp **** }
 138              		.loc 2 101 5 is_stmt 1
 101:src/../h/riscv.hpp **** }
 139              		.loc 2 101 12 is_stmt 0
 140 008c 833784FC 		ld	a5,-56(s0)
 141              	.LBE115:
 142              	.LBE114:
  23:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 143              		.loc 1 23 45
 144 0090 93874700 		addi	a5,a5,4
  23:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
GAS LISTING /tmp/ccgxMJ4d.s 			page 10


 145              		.loc 1 23 47
 146 0094 233CF4F8 		sd	a5,-104(s0)
  24:src/riscv.cpp ****         uint64 a0;
 147              		.loc 1 24 9 is_stmt 1
 148              	.LBB116:
 149              	.LBB117:
 164:src/../h/riscv.hpp **** 
 165:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 166:src/../h/riscv.hpp **** {
 167:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 150              		.loc 2 167 5
 168:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 151              		.loc 2 168 5
 152              		.loc 2 168 76 is_stmt 0
 153              	#APP
 154              	# 168 "src/../h/riscv.hpp" 1
 169              	    return sstatus;
 155              		csrr a5, sstatus
 156              	# 0 "" 2
 157              	#NO_APP
 158 009c 2330F4FC 		sd	a5,-64(s0)
 159              		.loc 2 169 5 is_stmt 1
 160              		.loc 2 169 12 is_stmt 0
 161 00a0 833704FC 		ld	a5,-64(s0)
 162              	.LBE117:
 163              	.LBE116:
  24:src/riscv.cpp ****         uint64 a0;
 164              		.loc 1 24 45
 165 00a4 2330F4FA 		sd	a5,-96(s0)
  25:src/riscv.cpp ****         __asm__ volatile("ld %0, 10*8(s0)" : "=r"(a0)); // read a0
 166              		.loc 1 25 9 is_stmt 1
  26:src/riscv.cpp **** 
 167              		.loc 1 26 9
  26:src/riscv.cpp **** 
 168              		.loc 1 26 55 is_stmt 0
 169              	#APP
 170              	# 26 "src/riscv.cpp" 1
 171              		ld a5, 10*8(s0)
 172              	# 0 "" 2
 173              	.LVL5:
  28:src/riscv.cpp ****         {
 174              		.loc 1 28 9 is_stmt 1
 175              	#NO_APP
 176              	.LBB118:
 177 00ac 13071000 		li	a4,1
 178              	.LVL6:
 179 00b0 6380E708 		beq	a5,a4,.L38
 180              	.LBE118:
 181              	.LBE113:
 182              	.LBE303:
  35:src/riscv.cpp ****         {
 183              		.loc 1 35 14
 184              	.LBB304:
 185              	.LBB286:
 186              	.LBB267:
 187              	.LBB119:
 188 00b4 13072000 		li	a4,2
GAS LISTING /tmp/ccgxMJ4d.s 			page 11


 189 00b8 6388E70A 		beq	a5,a4,.L39
 190              	.LBE119:
 191              	.LBE267:
 192              	.LBE286:
 193              	.LBE304:
  42:src/riscv.cpp ****         {
 194              		.loc 1 42 14
 195              	.LBB305:
 196              	.LBB287:
 197              	.LBB268:
 198              	.LBB252:
 199              	.LBB120:
 200 00bc 13071001 		li	a4,17
 201 00c0 638EE70A 		beq	a5,a4,.L40
 202              	.LBE120:
 203              	.LBE252:
 204              	.LBE268:
 205              	.LBE287:
 206              	.LBE305:
  59:src/riscv.cpp ****         {
 207              		.loc 1 59 14
 208              	.LBB306:
 209              	.LBB288:
 210              	.LBB269:
 211              	.LBB253:
 212              	.LBB238:
 213              	.LBB121:
 214 00c4 13073001 		li	a4,19
 215 00c8 6384E70E 		beq	a5,a4,.L41
 216              	.LBE121:
 217              	.LBE238:
 218              	.LBE253:
 219              	.LBE269:
 220              	.LBE288:
 221              	.LBE306:
  63:src/riscv.cpp ****         {
 222              		.loc 1 63 14
 223              	.LBB307:
 224              	.LBB289:
 225              	.LBB270:
 226              	.LBB254:
 227              	.LBB239:
 228              	.LBB224:
 229              	.LBB122:
 230 00cc 13072001 		li	a4,18
 231 00d0 6386E70E 		beq	a5,a4,.L42
 232              	.LBE122:
 233              	.LBE224:
 234              	.LBE239:
 235              	.LBE254:
 236              	.LBE270:
 237              	.LBE289:
 238              	.LBE307:
  68:src/riscv.cpp ****             time_t time;
 239              		.loc 1 68 14
 240              	.LBB308:
 241              	.LBB290:
GAS LISTING /tmp/ccgxMJ4d.s 			page 12


 242              	.LBB271:
 243              	.LBB255:
 244              	.LBB240:
 245              	.LBB225:
 246              	.LBB213:
 247              	.LBB123:
 248 00d4 13074001 		li	a4,20
 249 00d8 6382E710 		beq	a5,a4,.L43
 250              	.LBE123:
 251              	.LBE213:
 252              	.LBE225:
 253              	.LBE240:
 254              	.LBE255:
 255              	.LBE271:
 256              	.LBE290:
 257              	.LBE308:
  73:src/riscv.cpp ****         {
 258              		.loc 1 73 14
 259              	.LBB309:
 260              	.LBB291:
 261              	.LBB272:
 262              	.LBB256:
 263              	.LBB241:
 264              	.LBB226:
 265              	.LBB214:
 266              	.LBB201:
 267              	.LBB124:
 268 00dc 13071002 		li	a4,33
 269 00e0 638EE710 		beq	a5,a4,.L44
 270              	.LBE124:
 271              	.LBE201:
 272              	.LBE214:
 273              	.LBE226:
 274              	.LBE241:
 275              	.LBE256:
 276              	.LBE272:
 277              	.LBE291:
 278              	.LBE309:
  85:src/riscv.cpp ****             sem_t id;
 279              		.loc 1 85 14
 280              	.LBB310:
 281              	.LBB292:
 282              	.LBB273:
 283              	.LBB257:
 284              	.LBB242:
 285              	.LBB227:
 286              	.LBB215:
 287              	.LBB202:
 288              	.LBB191:
 289              	.LBB125:
 290 00e4 13073002 		li	a4,35
 291 00e8 638EE714 		beq	a5,a4,.L45
 292              	.LBE125:
 293              	.LBE191:
 294              	.LBE202:
 295              	.LBE215:
 296              	.LBE227:
GAS LISTING /tmp/ccgxMJ4d.s 			page 13


 297              	.LBE242:
 298              	.LBE257:
 299              	.LBE273:
 300              	.LBE292:
 301              	.LBE310:
  99:src/riscv.cpp ****             sem_t handle;
 302              		.loc 1 99 14
 303              	.LBB311:
 304              	.LBB293:
 305              	.LBB274:
 306              	.LBB258:
 307              	.LBB243:
 308              	.LBB228:
 309              	.LBB216:
 310              	.LBB203:
 311              	.LBB192:
 312              	.LBB174:
 313              	.LBB126:
 314 00ec 13072002 		li	a4,34
 315 00f0 638EE716 		beq	a5,a4,.L46
 316              	.LBE126:
 317              	.LBE174:
 318              	.LBE192:
 319              	.LBE203:
 320              	.LBE216:
 321              	.LBE228:
 322              	.LBE243:
 323              	.LBE258:
 324              	.LBE274:
 325              	.LBE293:
 326              	.LBE311:
 112:src/riscv.cpp ****             sem_t handle;
 327              		.loc 1 112 14
 328              	.LBB312:
 329              	.LBB294:
 330              	.LBB275:
 331              	.LBB259:
 332              	.LBB244:
 333              	.LBB229:
 334              	.LBB217:
 335              	.LBB204:
 336              	.LBB193:
 337              	.LBB175:
 338              	.LBB164:
 339              	.LBB127:
 340 00f4 13074002 		li	a4,36
 341 00f8 638EE718 		beq	a5,a4,.L47
 342              	.LBE127:
 343              	.LBE164:
 344              	.LBE175:
 345              	.LBE193:
 346              	.LBE204:
 347              	.LBE217:
 348              	.LBE229:
 349              	.LBE244:
 350              	.LBE259:
 351              	.LBE275:
GAS LISTING /tmp/ccgxMJ4d.s 			page 14


 352              	.LBE294:
 353              	.LBE312:
 126:src/riscv.cpp ****             sem_t id;
 354              		.loc 1 126 14
 355              	.LBB313:
 356              	.LBB295:
 357              	.LBB276:
 358              	.LBB260:
 359              	.LBB245:
 360              	.LBB230:
 361              	.LBB218:
 362              	.LBB205:
 363              	.LBB194:
 364              	.LBB176:
 365              	.LBB165:
 366              	.LBB155:
 367              	.LBB128:
 368 00fc 13075002 		li	a4,37
 369 0100 638EE71A 		beq	a5,a4,.L48
 370              	.LBE128:
 371              	.LBE155:
 372              	.LBE165:
 373              	.LBE176:
 374              	.LBE194:
 375              	.LBE205:
 376              	.LBE218:
 377              	.LBE230:
 378              	.LBE245:
 379              	.LBE260:
 380              	.LBE276:
 381              	.LBE295:
 382              	.LBE313:
 142:src/riscv.cpp ****             sem_t handle;
 383              		.loc 1 142 14
 384              	.LBB314:
 385              	.LBB296:
 386              	.LBB277:
 387              	.LBB261:
 388              	.LBB246:
 389              	.LBB231:
 390              	.LBB219:
 391              	.LBB206:
 392              	.LBB195:
 393              	.LBB177:
 394              	.LBB166:
 395              	.LBB156:
 396              	.LBB147:
 397              	.LBB129:
 398 0104 13076002 		li	a4,38
 399 0108 6380E71E 		beq	a5,a4,.L49
 400              	.LBE129:
 401              	.LBE147:
 402              	.LBE156:
 403              	.LBE166:
 404              	.LBE177:
 405              	.LBE195:
 406              	.LBE206:
GAS LISTING /tmp/ccgxMJ4d.s 			page 15


 407              	.LBE219:
 408              	.LBE231:
 409              	.LBE246:
 410              	.LBE261:
 411              	.LBE277:
 412              	.LBE296:
 413              	.LBE314:
 156:src/riscv.cpp ****             char character = __getc();
 414              		.loc 1 156 14
 415              	.LBB315:
 416              	.LBB297:
 417              	.LBB278:
 418              	.LBB262:
 419              	.LBB247:
 420              	.LBB232:
 421              	.LBB220:
 422              	.LBB207:
 423              	.LBB196:
 424              	.LBB178:
 425              	.LBB167:
 426              	.LBB157:
 427              	.LBB148:
 428              	.LBB140:
 429              	.LBB130:
 430 010c 13071004 		li	a4,65
 431 0110 638EE71E 		beq	a5,a4,.L50
 432              	.LBE130:
 433              	.LBE140:
 434              	.LBE148:
 435              	.LBE157:
 436              	.LBE167:
 437              	.LBE178:
 438              	.LBE196:
 439              	.LBE207:
 440              	.LBE220:
 441              	.LBE232:
 442              	.LBE247:
 443              	.LBE262:
 444              	.LBE278:
 445              	.LBE297:
 446              	.LBE315:
 160:src/riscv.cpp ****             char character;
 447              		.loc 1 160 14
 448              	.LBB316:
 449              	.LBB298:
 450              	.LBB279:
 451              	.LBB263:
 452              	.LBB248:
 453              	.LBB233:
 454              	.LBB221:
 455              	.LBB208:
 456              	.LBB197:
 457              	.LBB179:
 458              	.LBB168:
 459              	.LBB158:
 460              	.LBB149:
 461              	.LBB141:
GAS LISTING /tmp/ccgxMJ4d.s 			page 16


 462              	.LBB134:
 463              	.LBB131:
 464 0114 13072004 		li	a4,66
 465 0118 6394E702 		bne	a5,a4,.L6
 466              	.LBB132:
 161:src/riscv.cpp ****             __asm__ volatile("ld %0, 11*8(s0)" : "=r"(character));
 467              		.loc 1 161 13
 162:src/riscv.cpp ****             __putc(character);
 468              		.loc 1 162 13
 162:src/riscv.cpp ****             __putc(character);
 469              		.loc 1 162 66 is_stmt 0
 470              	#APP
 471              	# 162 "src/riscv.cpp" 1
 472              		ld a0, 11*8(s0)
 473              	# 0 "" 2
 474              	.LVL7:
 163:src/riscv.cpp ****         }
 475              		.loc 1 163 13 is_stmt 1
 163:src/riscv.cpp ****         }
 476              		.loc 1 163 19 is_stmt 0
 477              	#NO_APP
 478 0120 1375F50F 		andi	a0,a0,0xff
 479 0124 97000000 		call	__putc
 479      E7800000 
 480              	.LVL8:
 481              	.LBE132:
 482 012c 6F004001 		j	.L6
 483              	.LVL9:
 484              	.L38:
 485              	.LBE131:
 486              	.LBE134:
 487              	.LBE141:
 488              	.LBE149:
 489              	.LBE158:
 490              	.LBE168:
 491              	.LBE179:
 492              	.LBE197:
 493              	.LBE208:
 494              	.LBE221:
 495              	.LBE233:
 496              	.LBE248:
 497              	.LBE263:
 498              	.LBB264:
  30:src/riscv.cpp ****             __asm__ volatile("ld %0, 12*8(s0)" : "=r"(size)); // read a2
 499              		.loc 1 30 13 is_stmt 1
  31:src/riscv.cpp ****             void *returnVal = MemoryAllocator::mem_alloc(size);
 500              		.loc 1 31 13
  31:src/riscv.cpp ****             void *returnVal = MemoryAllocator::mem_alloc(size);
 501              		.loc 1 31 61 is_stmt 0
 502              	#APP
 503              	# 31 "src/riscv.cpp" 1
 504              		ld a0, 12*8(s0)
 505              	# 0 "" 2
 506              	.LVL10:
  32:src/riscv.cpp ****             __asm__ volatile("sd %0, 10*8(s0)" ::"r"(returnVal)); // store return value in a0
 507              		.loc 1 32 13 is_stmt 1
  32:src/riscv.cpp ****             __asm__ volatile("sd %0, 10*8(s0)" ::"r"(returnVal)); // store return value in a0
GAS LISTING /tmp/ccgxMJ4d.s 			page 17


 508              		.loc 1 32 57 is_stmt 0
 509              	#NO_APP
 510 0134 97000000 		call	_ZN15MemoryAllocator9mem_allocEm
 510      E7800000 
 511              	.LVL11:
  33:src/riscv.cpp ****         }
 512              		.loc 1 33 13 is_stmt 1
  33:src/riscv.cpp ****         }
 513              		.loc 1 33 65 is_stmt 0
 514              	#APP
 515              	# 33 "src/riscv.cpp" 1
 516              		sd a0, 10*8(s0)
 517              	# 0 "" 2
 518              	.LVL12:
 519              	#NO_APP
 520              	.L6:
 521              	.LBE264:
 522              	.LBE279:
 165:src/riscv.cpp ****         w_sepc(new_sepc);
 523              		.loc 1 165 9 is_stmt 1
 165:src/riscv.cpp ****         w_sepc(new_sepc);
 524              		.loc 1 165 18 is_stmt 0
 525 0140 833704FA 		ld	a5,-96(s0)
 526              	.LVL13:
 527              	.LBB280:
 528              	.LBB281:
 170:src/../h/riscv.hpp **** }
 171:src/../h/riscv.hpp **** 
 172:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 173:src/../h/riscv.hpp **** {
 174:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 529              		.loc 2 174 5 is_stmt 1
 530              		.loc 2 174 77 is_stmt 0
 531              	#APP
 532              	# 174 "src/../h/riscv.hpp" 1
 175              	}
 533              		csrw sstatus, a5
 534              	# 0 "" 2
 535              	.LVL14:
 536              	#NO_APP
 537              	.LBE281:
 538              	.LBE280:
 166:src/riscv.cpp ****     }
 539              		.loc 1 166 9 is_stmt 1
 166:src/riscv.cpp ****     }
 540              		.loc 1 166 15 is_stmt 0
 541 0148 833784F9 		ld	a5,-104(s0)
 542              	.LVL15:
 543              	.LBB282:
 544              	.LBB283:
 106:src/../h/riscv.hpp **** }
 545              		.loc 2 106 5 is_stmt 1
 106:src/../h/riscv.hpp **** }
 546              		.loc 2 106 65 is_stmt 0
 547              	#APP
 548              	# 106 "src/../h/riscv.hpp" 1
 549              		csrw sepc, a5
GAS LISTING /tmp/ccgxMJ4d.s 			page 18


 550              	# 0 "" 2
 551              	.LVL16:
 552              	#NO_APP
 553              	.L3:
 554              	.LBE283:
 555              	.LBE282:
 556              	.LBE298:
 557              	.LBE316:
 558              		.loc 1 195 1
 559 0150 83308106 		ld	ra,104(sp)
 560              		.cfi_remember_state
 561              		.cfi_restore 1
 562 0154 03340106 		ld	s0,96(sp)
 563              		.cfi_restore 8
 564 0158 83348105 		ld	s1,88(sp)
 565              		.cfi_restore 9
 566 015c 03390105 		ld	s2,80(sp)
 567              		.cfi_restore 18
 568 0160 13010107 		addi	sp,sp,112
 569              		.cfi_def_cfa_register 2
 570 0164 67800000 		jr	ra
 571              	.LVL17:
 572              	.L39:
 573              		.cfi_restore_state
 574              	.LBB317:
 575              	.LBB299:
 576              	.LBB284:
 577              	.LBB265:
 578              	.LBB249:
  37:src/riscv.cpp ****             __asm__ volatile("ld %0, 12*8(s0)" : "=r"(addr)); // read a2
 579              		.loc 1 37 13 is_stmt 1
  38:src/riscv.cpp ****             int status = MemoryAllocator::mem_free(addr);
 580              		.loc 1 38 13
  38:src/riscv.cpp ****             int status = MemoryAllocator::mem_free(addr);
 581              		.loc 1 38 61 is_stmt 0
 582              	#APP
 583              	# 38 "src/riscv.cpp" 1
 584              		ld a0, 12*8(s0)
 585              	# 0 "" 2
 586              	.LVL18:
  39:src/riscv.cpp ****             __asm__ volatile("sd %0, 10*8(s0)" ::"r"(status)); // store status in a0
 587              		.loc 1 39 13 is_stmt 1
  39:src/riscv.cpp ****             __asm__ volatile("sd %0, 10*8(s0)" ::"r"(status)); // store status in a0
 588              		.loc 1 39 51 is_stmt 0
 589              	#NO_APP
 590 016c 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv
 590      E7800000 
 591              	.LVL19:
  40:src/riscv.cpp ****         }
 592              		.loc 1 40 13 is_stmt 1
  40:src/riscv.cpp ****         }
 593              		.loc 1 40 62 is_stmt 0
 594              	#APP
 595              	# 40 "src/riscv.cpp" 1
 596              		sd a0, 10*8(s0)
 597              	# 0 "" 2
 598              	#NO_APP
GAS LISTING /tmp/ccgxMJ4d.s 			page 19


 599              	.LBE249:
 600 0178 6FF09FFC 		j	.L6
 601              	.LVL20:
 602              	.L40:
 603              	.LBB250:
 604              	.LBB234:
  44:src/riscv.cpp ****             __asm__ volatile("ld %0, 11*8(s0)" : "=r"(handle));
 605              		.loc 1 44 13 is_stmt 1
  45:src/riscv.cpp ****             void (*start_routine)(void *);
 606              		.loc 1 45 13
  45:src/riscv.cpp ****             void (*start_routine)(void *);
 607              		.loc 1 45 63 is_stmt 0
 608              	#APP
 609              	# 45 "src/riscv.cpp" 1
 610              		ld s1, 11*8(s0)
 611              	# 0 "" 2
 612              	.LVL21:
  46:src/riscv.cpp ****             __asm__ volatile("ld %0, 12*8(s0)" : "=r"(start_routine));
 613              		.loc 1 46 13 is_stmt 1
  47:src/riscv.cpp ****             void *arg;
 614              		.loc 1 47 13
  47:src/riscv.cpp ****             void *arg;
 615              		.loc 1 47 70 is_stmt 0
 616              	# 47 "src/riscv.cpp" 1
 617              		ld a0, 12*8(s0)
 618              	# 0 "" 2
 619              	.LVL22:
  48:src/riscv.cpp ****             __asm__ volatile("ld %0, 13*8(s0)" : "=r"(arg));
 620              		.loc 1 48 13 is_stmt 1
  49:src/riscv.cpp ****             uint64 *stack;
 621              		.loc 1 49 13
  49:src/riscv.cpp ****             uint64 *stack;
 622              		.loc 1 49 60 is_stmt 0
 623              	# 49 "src/riscv.cpp" 1
 624              		ld a2, 13*8(s0)
 625              	# 0 "" 2
 626              	.LVL23:
  50:src/riscv.cpp ****             __asm__ volatile("ld %0, 14*8(s0)" : "=r"(stack));
 627              		.loc 1 50 13 is_stmt 1
  51:src/riscv.cpp ****             *handle = TCB::createThread((TCB::Body)start_routine, stack, arg);
 628              		.loc 1 51 13
  51:src/riscv.cpp ****             *handle = TCB::createThread((TCB::Body)start_routine, stack, arg);
 629              		.loc 1 51 62 is_stmt 0
 630              	# 51 "src/riscv.cpp" 1
 631              		ld a1, 14*8(s0)
 632              	# 0 "" 2
 633              	.LVL24:
  52:src/riscv.cpp **** 
 634              		.loc 1 52 13 is_stmt 1
  52:src/riscv.cpp **** 
 635              		.loc 1 52 40 is_stmt 0
 636              	#NO_APP
 637 018c 97000000 		call	_ZN3TCB12createThreadEPFvPvEPmS0_
 637      E7800000 
 638              	.LVL25:
  52:src/riscv.cpp **** 
 639              		.loc 1 52 21
GAS LISTING /tmp/ccgxMJ4d.s 			page 20


 640 0194 23B0A400 		sd	a0,0(s1)
  54:src/riscv.cpp ****             if (*handle == nullptr)
 641              		.loc 1 54 13 is_stmt 1
 642              	.LVL26:
  55:src/riscv.cpp ****                 status = -1;
 643              		.loc 1 55 13
 644 0198 63080500 		beqz	a0,.L28
  54:src/riscv.cpp ****             if (*handle == nullptr)
 645              		.loc 1 54 20 is_stmt 0
 646 019c 93070000 		li	a5,0
 647              	.L9:
 648              	.LVL27:
  57:src/riscv.cpp ****         }
 649              		.loc 1 57 13 is_stmt 1
  57:src/riscv.cpp ****         }
 650              		.loc 1 57 62 is_stmt 0
 651              	#APP
 652              	# 57 "src/riscv.cpp" 1
 653              		sd a5, 10*8(s0)
 654              	# 0 "" 2
 655              	#NO_APP
 656              	.LBE234:
 657 01a4 6FF0DFF9 		j	.L6
 658              	.LVL28:
 659              	.L28:
 660              	.LBB235:
  56:src/riscv.cpp ****             __asm__ volatile("sd %0, 10*8(s0)" ::"r"(status));
 661              		.loc 1 56 24
 662 01a8 9307F0FF 		li	a5,-1
 663 01ac 6FF05FFF 		j	.L9
 664              	.LVL29:
 665              	.L41:
 666              	.LBE235:
 667              	.LBB236:
  61:src/riscv.cpp ****         }
 668              		.loc 1 61 13 is_stmt 1
  61:src/riscv.cpp ****         }
 669              		.loc 1 61 26 is_stmt 0
 670 01b0 97000000 		call	_ZN3TCB8dispatchEv
 670      E7800000 
 671              	.LVL30:
 672 01b8 6FF09FF8 		j	.L6
 673              	.LVL31:
 674              	.L42:
 675              	.LBB222:
  65:src/riscv.cpp ****             TCB::dispatch();
 676              		.loc 1 65 13 is_stmt 1
  65:src/riscv.cpp ****             TCB::dispatch();
 677              		.loc 1 65 38 is_stmt 0
 678 01bc 97070000 		lla	a5,_ZN3TCB7runningE
 678      93870700 
 679              	.LVL32:
 680 01c4 83B70700 		ld	a5,0(a5)
 681              	.LVL33:
 682              	.LBB209:
 683              	.LBB210:
 684              		.file 3 "src/../h/tcb.hpp"
GAS LISTING /tmp/ccgxMJ4d.s 			page 21


   1:src/../h/tcb.hpp **** #ifndef PROJECT_BASE_TCB_HPP
   2:src/../h/tcb.hpp **** #define PROJECT_BASE_TCB_HPP
   3:src/../h/tcb.hpp **** 
   4:src/../h/tcb.hpp **** #include "../lib/hw.h"
   5:src/../h/tcb.hpp **** #include "scheduler.hpp"
   6:src/../h/tcb.hpp **** 
   7:src/../h/tcb.hpp **** // Thread Control Block
   8:src/../h/tcb.hpp **** class TCB
   9:src/../h/tcb.hpp **** {
  10:src/../h/tcb.hpp **** public:
  11:src/../h/tcb.hpp ****     void *operator new(size_t n) { return MemoryAllocator::mem_alloc((n + MEM_BLOCK_SIZE - 1) / MEM
  12:src/../h/tcb.hpp ****     void *operator new[](size_t n) { return MemoryAllocator::mem_alloc((n + MEM_BLOCK_SIZE - 1) / M
  13:src/../h/tcb.hpp **** 
  14:src/../h/tcb.hpp ****     void operator delete(void *p) noexcept { MemoryAllocator::mem_free(p); }
  15:src/../h/tcb.hpp ****     void operator delete[](void *p) noexcept { MemoryAllocator::mem_free(p); }
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
 685              		.loc 3 21 36 is_stmt 1
 686              		.loc 3 21 45 is_stmt 0
 687 01c8 13071000 		li	a4,1
 688 01cc 2388E702 		sb	a4,48(a5)
 689              	.LVL34:
 690              	.LBE210:
 691              	.LBE209:
  66:src/riscv.cpp ****         }
 692              		.loc 1 66 13 is_stmt 1
  66:src/riscv.cpp ****         }
 693              		.loc 1 66 26 is_stmt 0
 694 01d0 97000000 		call	_ZN3TCB8dispatchEv
 694      E7800000 
 695              	.LVL35:
 696 01d8 6FF09FF6 		j	.L6
 697              	.LVL36:
 698              	.L43:
 699              	.LBB211:
 700              	.LBB198:
  69:src/riscv.cpp ****             __asm__ volatile("ld %0, 11*8(s0)" : "=r"(time));
 701              		.loc 1 69 13 is_stmt 1
  70:src/riscv.cpp ****             TCB::addToSleepingList(TCB::running, time);
 702              		.loc 1 70 13
  70:src/riscv.cpp ****             TCB::addToSleepingList(TCB::running, time);
 703              		.loc 1 70 61 is_stmt 0
 704              	#APP
 705              	# 70 "src/riscv.cpp" 1
 706              		ld a1, 11*8(s0)
 707              	# 0 "" 2
 708              	.LVL37:
  71:src/riscv.cpp ****         }
 709              		.loc 1 71 13 is_stmt 1
  71:src/riscv.cpp ****         }
 710              		.loc 1 71 35 is_stmt 0
 711              	#NO_APP
 712 01e0 9B850500 		sext.w	a1,a1
GAS LISTING /tmp/ccgxMJ4d.s 			page 22


 713              	.LVL38:
 714 01e4 97070000 		lla	a5,_ZN3TCB7runningE
 714      93870700 
 715              	.LVL39:
 716 01ec 03B50700 		ld	a0,0(a5)
 717 01f0 97000000 		call	_ZN3TCB17addToSleepingListEPS_i
 717      E7800000 
 718              	.LVL40:
 719              	.LBE198:
 720 01f8 6FF09FF4 		j	.L6
 721              	.LVL41:
 722              	.L44:
 723              	.LBB199:
 724              	.LBB180:
  75:src/riscv.cpp ****             __asm__ volatile("ld %0, 11*8(s0)" : "=r"(handle));
 725              		.loc 1 75 13 is_stmt 1
  76:src/riscv.cpp ****             unsigned init;
 726              		.loc 1 76 13
  76:src/riscv.cpp ****             unsigned init;
 727              		.loc 1 76 63 is_stmt 0
 728              	#APP
 729              	# 76 "src/riscv.cpp" 1
 730              		ld s1, 11*8(s0)
 731              	# 0 "" 2
 732              	.LVL42:
  77:src/riscv.cpp ****             __asm__ volatile("ld %0, 12*8(s0)" : "=r"(init));
 733              		.loc 1 77 13 is_stmt 1
  78:src/riscv.cpp ****             *handle = mySem::createSemaphore((int)init);
 734              		.loc 1 78 13
  78:src/riscv.cpp ****             *handle = mySem::createSemaphore((int)init);
 735              		.loc 1 78 61 is_stmt 0
 736              	# 78 "src/riscv.cpp" 1
 737              		ld s2, 12*8(s0)
 738              	# 0 "" 2
 739              	.LVL43:
  79:src/riscv.cpp ****             uint64 status = 0;
 740              		.loc 1 79 13 is_stmt 1
 741              	#NO_APP
 742              	.LBE180:
 743              	.LBE199:
 744              	.LBE211:
 745              	.LBE222:
 746              	.LBE236:
 747              	.LBE250:
 748              	.LBE265:
 749              	.LBE284:
 750              	.LBE299:
 751              	.LBE317:
 752              		.file 4 "src/../h/../h/mySem.hpp"
   1:src/../h/../h/mySem.hpp **** #ifndef PROJECT_BASE_1_MYSEM_HPP
   2:src/../h/../h/mySem.hpp **** #define PROJECT_BASE_1_MYSEM_HPP
   3:src/../h/../h/mySem.hpp **** 
   4:src/../h/../h/mySem.hpp **** #include "tcb.hpp"
   5:src/../h/../h/mySem.hpp **** 
   6:src/../h/../h/mySem.hpp **** class mySem{
   7:src/../h/../h/mySem.hpp **** public:
   8:src/../h/../h/mySem.hpp ****     void *operator new(size_t n) { return MemoryAllocator::mem_alloc((n + MEM_BLOCK_SIZE - 1) / MEM
GAS LISTING /tmp/ccgxMJ4d.s 			page 23


   9:src/../h/../h/mySem.hpp ****     void operator delete(void *p) noexcept { MemoryAllocator::mem_free(p);}
  10:src/../h/../h/mySem.hpp **** 
  11:src/../h/../h/mySem.hpp ****     mySem (int initValue=1) : val(initValue) {}
  12:src/../h/../h/mySem.hpp ****     void close();
  13:src/../h/../h/mySem.hpp ****     void wait();
  14:src/../h/../h/mySem.hpp ****     void block();
  15:src/../h/../h/mySem.hpp ****     void signal();
  16:src/../h/../h/mySem.hpp ****     void deblock();
  17:src/../h/../h/mySem.hpp ****     int trywait();
  18:src/../h/../h/mySem.hpp ****     void addToWaitingList(time_t period);
  19:src/../h/../h/mySem.hpp ****     void checkWaitingList();
  20:src/../h/../h/mySem.hpp ****     bool isClosed(){return closed;}
  21:src/../h/../h/mySem.hpp ****     static mySem* createSemaphore(int init){
  22:src/../h/../h/mySem.hpp ****         return new mySem(init);
 753              		.loc 4 22 9
 754              	.LBB318:
 755              	.LBB300:
 756              	.LBB285:
 757              	.LBB266:
 758              	.LBB251:
 759              	.LBB237:
 760              	.LBB223:
 761              	.LBB212:
 762              	.LBB200:
 763              	.LBB188:
 764              	.LBB181:
 765              	.LBB182:
 766              	.LBB183:
   8:src/../h/../h/mySem.hpp ****     void operator delete(void *p) noexcept { MemoryAllocator::mem_free(p);}
 767              		.loc 4 8 36
   8:src/../h/../h/mySem.hpp ****     void operator delete(void *p) noexcept { MemoryAllocator::mem_free(p);}
 768              		.loc 4 8 69 is_stmt 0
 769 0204 13051000 		li	a0,1
 770 0208 97000000 		call	_ZN15MemoryAllocator9mem_allocEm
 770      E7800000 
 771              	.LVL44:
 772              	.LBE183:
 773              	.LBE182:
 774              	.LBB184:
 775              	.LBB185:
  11:src/../h/../h/mySem.hpp ****     void close();
 776              		.loc 4 11 44
 777 0210 23202501 		sw	s2,0(a0)
 778 0214 23020500 		sb	zero,4(a0)
 779              	.LVL45:
 780              	.LBB186:
 781              	.LBB187:
 782              		.file 5 "src/../h/list.hpp"
   1:src/../h/list.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_LIST_HPP
   2:src/../h/list.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_LIST_HPP
   3:src/../h/list.hpp **** 
   4:src/../h/list.hpp **** #include "../h/MemoryAllocator.hpp"
   5:src/../h/list.hpp **** 
   6:src/../h/list.hpp **** 
   7:src/../h/list.hpp **** template <typename T>
   8:src/../h/list.hpp **** class List
   9:src/../h/list.hpp **** {
GAS LISTING /tmp/ccgxMJ4d.s 			page 24


  10:src/../h/list.hpp **** private:
  11:src/../h/list.hpp ****     struct Elem
  12:src/../h/list.hpp ****     {
  13:src/../h/list.hpp ****         T *data;
  14:src/../h/list.hpp ****         Elem *next;
  15:src/../h/list.hpp **** 
  16:src/../h/list.hpp ****         Elem(T *data, Elem *next) : data(data), next(next) {}
  17:src/../h/list.hpp ****     };
  18:src/../h/list.hpp **** 
  19:src/../h/list.hpp ****     Elem *head, *tail;
  20:src/../h/list.hpp ****     
  21:src/../h/list.hpp ****     Elem* pointer;
  22:src/../h/list.hpp ****     
  23:src/../h/list.hpp **** public:
  24:src/../h/list.hpp ****     List() : head(0), tail(0), pointer(0) {}
 783              		.loc 5 24 41
 784 0218 23340500 		sd	zero,8(a0)
 785 021c 23380500 		sd	zero,16(a0)
 786 0220 233C0500 		sd	zero,24(a0)
 787              	.LVL46:
 788              	.LBE187:
 789              	.LBE186:
  11:src/../h/../h/mySem.hpp ****     void close();
 790              		.loc 4 11 44
 791 0224 23000502 		sb	zero,32(a0)
 792              	.LVL47:
 793              	.LBE185:
 794              	.LBE184:
 795              	.LBE181:
  79:src/riscv.cpp ****             uint64 status = 0;
 796              		.loc 1 79 21
 797 0228 23B0A400 		sd	a0,0(s1)
  80:src/riscv.cpp ****             if (*handle == nullptr)
 798              		.loc 1 80 13 is_stmt 1
 799              	.LVL48:
  81:src/riscv.cpp ****                 status = -1;
 800              		.loc 1 81 13
 801 022c 63080500 		beqz	a0,.L29
  80:src/riscv.cpp ****             if (*handle == nullptr)
 802              		.loc 1 80 20 is_stmt 0
 803 0230 93070000 		li	a5,0
 804              	.L14:
 805              	.LVL49:
  83:src/riscv.cpp ****         }
 806              		.loc 1 83 13 is_stmt 1
  83:src/riscv.cpp ****         }
 807              		.loc 1 83 62 is_stmt 0
 808              	#APP
 809              	# 83 "src/riscv.cpp" 1
 810              		sd a5, 10*8(s0)
 811              	# 0 "" 2
 812              	#NO_APP
 813              	.LBE188:
 814 0238 6FF09FF0 		j	.L6
 815              	.LVL50:
 816              	.L29:
 817              	.LBB189:
GAS LISTING /tmp/ccgxMJ4d.s 			page 25


  82:src/riscv.cpp ****             __asm__ volatile("sd %0, 10*8(s0)" ::"r"(status));
 818              		.loc 1 82 24
 819 023c 9307F0FF 		li	a5,-1
 820 0240 6FF05FFF 		j	.L14
 821              	.LVL51:
 822              	.L45:
 823              	.LBE189:
 824              	.LBB190:
 825              	.LBB169:
  86:src/riscv.cpp ****             __asm__ volatile("ld %0, 11*8(s0)" : "=r"(id));
 826              		.loc 1 86 13 is_stmt 1
  87:src/riscv.cpp **** 
 827              		.loc 1 87 13
  87:src/riscv.cpp **** 
 828              		.loc 1 87 59 is_stmt 0
 829              	#APP
 830              	# 87 "src/riscv.cpp" 1
 831              		ld a0, 11*8(s0)
 832              	# 0 "" 2
 833              	.LVL52:
  89:src/riscv.cpp **** 
 834              		.loc 1 89 13 is_stmt 1
  91:src/riscv.cpp ****                 status = -1;
 835              		.loc 1 91 13
 836              	#NO_APP
 837              	.LBB170:
 838              	.LBB171:
  20:src/../h/../h/mySem.hpp ****     static mySem* createSemaphore(int init){
 839              		.loc 4 20 21
  20:src/../h/../h/mySem.hpp ****     static mySem* createSemaphore(int init){
 840              		.loc 4 20 28 is_stmt 0
 841 0248 83474500 		lbu	a5,4(a0)
 842              	.LVL53:
 843              	.LBE171:
 844              	.LBE170:
  91:src/riscv.cpp ****                 status = -1;
 845              		.loc 1 91 13
 846 024c 63880700 		beqz	a5,.L51
  92:src/riscv.cpp ****             }
 847              		.loc 1 92 24
 848 0250 9307F0FF 		li	a5,-1
 849              	.LVL54:
 850              	.L16:
  97:src/riscv.cpp ****         }
 851              		.loc 1 97 13 is_stmt 1
  97:src/riscv.cpp ****         }
 852              		.loc 1 97 62 is_stmt 0
 853              	#APP
 854              	# 97 "src/riscv.cpp" 1
 855              		sd a5, 10*8(s0)
 856              	# 0 "" 2
 857              	#NO_APP
 858              	.LBE169:
 859 0258 6FF09FEE 		j	.L6
 860              	.LVL55:
 861              	.L51:
 862              	.LBB172:
GAS LISTING /tmp/ccgxMJ4d.s 			page 26


  95:src/riscv.cpp ****             }
 863              		.loc 1 95 17 is_stmt 1
  95:src/riscv.cpp ****             }
 864              		.loc 1 95 25 is_stmt 0
 865 025c 97000000 		call	_ZN5mySem4waitEv
 865      E7800000 
 866              	.LVL56:
  89:src/riscv.cpp **** 
 867              		.loc 1 89 20
 868 0264 93070000 		li	a5,0
 869 0268 6FF0DFFE 		j	.L16
 870              	.LVL57:
 871              	.L46:
 872              	.LBE172:
 873              	.LBB173:
 874              	.LBB159:
 100:src/riscv.cpp ****             __asm__ volatile("ld %0, 11*8(s0)" : "=r"(handle));
 875              		.loc 1 100 13 is_stmt 1
 101:src/riscv.cpp **** 
 876              		.loc 1 101 13
 101:src/riscv.cpp **** 
 877              		.loc 1 101 63 is_stmt 0
 878              	#APP
 879              	# 101 "src/riscv.cpp" 1
 880              		ld a0, 11*8(s0)
 881              	# 0 "" 2
 882              	.LVL58:
 103:src/riscv.cpp **** 
 883              		.loc 1 103 13 is_stmt 1
 105:src/riscv.cpp ****                 status = -1;
 884              		.loc 1 105 13
 885              	#NO_APP
 886              	.LBB160:
 887              	.LBB161:
  20:src/../h/../h/mySem.hpp ****     static mySem* createSemaphore(int init){
 888              		.loc 4 20 21
  20:src/../h/../h/mySem.hpp ****     static mySem* createSemaphore(int init){
 889              		.loc 4 20 28 is_stmt 0
 890 0270 83474500 		lbu	a5,4(a0)
 891              	.LVL59:
 892              	.LBE161:
 893              	.LBE160:
 105:src/riscv.cpp ****                 status = -1;
 894              		.loc 1 105 13
 895 0274 63880700 		beqz	a5,.L52
 106:src/riscv.cpp ****             else{
 896              		.loc 1 106 24
 897 0278 9307F0FF 		li	a5,-1
 898              	.LVL60:
 899              	.L18:
 110:src/riscv.cpp ****         }
 900              		.loc 1 110 13 is_stmt 1
 110:src/riscv.cpp ****         }
 901              		.loc 1 110 62 is_stmt 0
 902              	#APP
 903              	# 110 "src/riscv.cpp" 1
 904              		sd a5, 10*8(s0)
GAS LISTING /tmp/ccgxMJ4d.s 			page 27


 905              	# 0 "" 2
 906              	#NO_APP
 907              	.LBE159:
 908 0280 6FF01FEC 		j	.L6
 909              	.LVL61:
 910              	.L52:
 911              	.LBB162:
 108:src/riscv.cpp ****             }
 912              		.loc 1 108 17 is_stmt 1
 108:src/riscv.cpp ****             }
 913              		.loc 1 108 30 is_stmt 0
 914 0284 97000000 		call	_ZN5mySem5closeEv
 914      E7800000 
 915              	.LVL62:
 103:src/riscv.cpp **** 
 916              		.loc 1 103 20
 917 028c 93070000 		li	a5,0
 918 0290 6FF0DFFE 		j	.L18
 919              	.LVL63:
 920              	.L47:
 921              	.LBE162:
 922              	.LBB163:
 923              	.LBB150:
 113:src/riscv.cpp ****             __asm__ volatile("ld %0, 11*8(s0)" : "=r"(handle));
 924              		.loc 1 113 13 is_stmt 1
 114:src/riscv.cpp **** 
 925              		.loc 1 114 13
 114:src/riscv.cpp **** 
 926              		.loc 1 114 63 is_stmt 0
 927              	#APP
 928              	# 114 "src/riscv.cpp" 1
 929              		ld a0, 11*8(s0)
 930              	# 0 "" 2
 931              	.LVL64:
 116:src/riscv.cpp **** 
 932              		.loc 1 116 13 is_stmt 1
 118:src/riscv.cpp ****                 status = -1;
 933              		.loc 1 118 13
 934              	#NO_APP
 935              	.LBB151:
 936              	.LBB152:
  20:src/../h/../h/mySem.hpp ****     static mySem* createSemaphore(int init){
 937              		.loc 4 20 21
  20:src/../h/../h/mySem.hpp ****     static mySem* createSemaphore(int init){
 938              		.loc 4 20 28 is_stmt 0
 939 0298 83474500 		lbu	a5,4(a0)
 940              	.LVL65:
 941              	.LBE152:
 942              	.LBE151:
 118:src/riscv.cpp ****                 status = -1;
 943              		.loc 1 118 13
 944 029c 63880700 		beqz	a5,.L53
 119:src/riscv.cpp ****             }
 945              		.loc 1 119 24
 946 02a0 9307F0FF 		li	a5,-1
 947              	.LVL66:
 948              	.L20:
GAS LISTING /tmp/ccgxMJ4d.s 			page 28


 124:src/riscv.cpp ****         }
 949              		.loc 1 124 13 is_stmt 1
 124:src/riscv.cpp ****         }
 950              		.loc 1 124 62 is_stmt 0
 951              	#APP
 952              	# 124 "src/riscv.cpp" 1
 953              		sd a5, 10*8(s0)
 954              	# 0 "" 2
 955              	#NO_APP
 956              	.LBE150:
 957 02a8 6FF09FE9 		j	.L6
 958              	.LVL67:
 959              	.L53:
 960              	.LBB153:
 122:src/riscv.cpp ****             }
 961              		.loc 1 122 17 is_stmt 1
 122:src/riscv.cpp ****             }
 962              		.loc 1 122 31 is_stmt 0
 963 02ac 97000000 		call	_ZN5mySem6signalEv
 963      E7800000 
 964              	.LVL68:
 116:src/riscv.cpp **** 
 965              		.loc 1 116 20
 966 02b4 93070000 		li	a5,0
 967 02b8 6FF0DFFE 		j	.L20
 968              	.LVL69:
 969              	.L48:
 970              	.LBE153:
 971              	.LBB154:
 972              	.LBB142:
 127:src/riscv.cpp ****             __asm__ volatile("ld %0, 12*8(s0)" : "=r"(id));
 973              		.loc 1 127 13 is_stmt 1
 128:src/riscv.cpp ****             time_t time;
 974              		.loc 1 128 13
 128:src/riscv.cpp ****             time_t time;
 975              		.loc 1 128 59 is_stmt 0
 976              	#APP
 977              	# 128 "src/riscv.cpp" 1
 978              		ld a0, 12*8(s0)
 979              	# 0 "" 2
 980              	.LVL70:
 129:src/riscv.cpp ****             __asm__ volatile("ld %0, 11*8(s0)" : "=r"(time));
 981              		.loc 1 129 13 is_stmt 1
 130:src/riscv.cpp **** 
 982              		.loc 1 130 13
 130:src/riscv.cpp **** 
 983              		.loc 1 130 61 is_stmt 0
 984              	# 130 "src/riscv.cpp" 1
 985              		ld a1, 11*8(s0)
 986              	# 0 "" 2
 987              	.LVL71:
 132:src/riscv.cpp **** 
 988              		.loc 1 132 13 is_stmt 1
 134:src/riscv.cpp ****                 status = -1;
 989              		.loc 1 134 13
 990              	#NO_APP
 991              	.LBB143:
GAS LISTING /tmp/ccgxMJ4d.s 			page 29


 992              	.LBB144:
  20:src/../h/../h/mySem.hpp ****     static mySem* createSemaphore(int init){
 993              		.loc 4 20 21
  20:src/../h/../h/mySem.hpp ****     static mySem* createSemaphore(int init){
 994              		.loc 4 20 28 is_stmt 0
 995 02c4 83474500 		lbu	a5,4(a0)
 996              	.LVL72:
 997              	.LBE144:
 998              	.LBE143:
 134:src/riscv.cpp ****                 status = -1;
 999              		.loc 1 134 13
 1000 02c8 63880700 		beqz	a5,.L54
 135:src/riscv.cpp ****             else{
 1001              		.loc 1 135 24
 1002 02cc 9307F0FF 		li	a5,-1
 1003              	.LVL73:
 1004              	.L22:
 139:src/riscv.cpp **** 
 1005              		.loc 1 139 13 is_stmt 1
 139:src/riscv.cpp **** 
 1006              		.loc 1 139 62 is_stmt 0
 1007              	#APP
 1008              	# 139 "src/riscv.cpp" 1
 1009              		sd a5, 10*8(s0)
 1010              	# 0 "" 2
 1011              	#NO_APP
 1012              	.LBE142:
 1013 02d4 6FF0DFE6 		j	.L6
 1014              	.LVL74:
 1015              	.L54:
 1016              	.LBB145:
 137:src/riscv.cpp ****             }
 1017              		.loc 1 137 17 is_stmt 1
 137:src/riscv.cpp ****             }
 1018              		.loc 1 137 37 is_stmt 0
 1019 02d8 97000000 		call	_ZN5mySem16addToWaitingListEm
 1019      E7800000 
 1020              	.LVL75:
 132:src/riscv.cpp **** 
 1021              		.loc 1 132 20
 1022 02e0 93070000 		li	a5,0
 1023 02e4 6FF0DFFE 		j	.L22
 1024              	.LVL76:
 1025              	.L49:
 1026              	.LBE145:
 1027              	.LBB146:
 1028              	.LBB135:
 143:src/riscv.cpp ****             __asm__ volatile("ld %0, 11*8(s0)" : "=r"(handle));
 1029              		.loc 1 143 13 is_stmt 1
 144:src/riscv.cpp **** 
 1030              		.loc 1 144 13
 144:src/riscv.cpp **** 
 1031              		.loc 1 144 63 is_stmt 0
 1032              	#APP
 1033              	# 144 "src/riscv.cpp" 1
 1034              		ld a0, 11*8(s0)
 1035              	# 0 "" 2
GAS LISTING /tmp/ccgxMJ4d.s 			page 30


 1036              	.LVL77:
 146:src/riscv.cpp **** 
 1037              		.loc 1 146 13 is_stmt 1
 148:src/riscv.cpp ****                 status = -1;
 1038              		.loc 1 148 13
 1039              	#NO_APP
 1040              	.LBB136:
 1041              	.LBB137:
  20:src/../h/../h/mySem.hpp ****     static mySem* createSemaphore(int init){
 1042              		.loc 4 20 21
  20:src/../h/../h/mySem.hpp ****     static mySem* createSemaphore(int init){
 1043              		.loc 4 20 28 is_stmt 0
 1044 02ec 83474500 		lbu	a5,4(a0)
 1045              	.LVL78:
 1046              	.LBE137:
 1047              	.LBE136:
 148:src/riscv.cpp ****                 status = -1;
 1048              		.loc 1 148 13
 1049 02f0 63880700 		beqz	a5,.L55
 149:src/riscv.cpp ****             }
 1050              		.loc 1 149 24
 1051 02f4 1305F0FF 		li	a0,-1
 1052              	.LVL79:
 1053              	.L24:
 154:src/riscv.cpp ****         }
 1054              		.loc 1 154 13 is_stmt 1
 154:src/riscv.cpp ****         }
 1055              		.loc 1 154 62 is_stmt 0
 1056              	#APP
 1057              	# 154 "src/riscv.cpp" 1
 1058              		sd a0, 10*8(s0)
 1059              	# 0 "" 2
 1060              	#NO_APP
 1061              	.LBE135:
 1062 02fc 6FF05FE4 		j	.L6
 1063              	.LVL80:
 1064              	.L55:
 1065              	.LBB138:
 152:src/riscv.cpp ****             }
 1066              		.loc 1 152 17 is_stmt 1
 152:src/riscv.cpp ****             }
 1067              		.loc 1 152 41 is_stmt 0
 1068 0300 97000000 		call	_ZN5mySem7trywaitEv
 1068      E7800000 
 1069              	.LVL81:
 1070 0308 6FF01FFF 		j	.L24
 1071              	.LVL82:
 1072              	.L50:
 1073              	.LBE138:
 1074              	.LBB139:
 1075              	.LBB133:
 157:src/riscv.cpp ****             __asm__ volatile("sd %0, 10*8(s0)" ::"r"(character));
 1076              		.loc 1 157 13 is_stmt 1
 157:src/riscv.cpp ****             __asm__ volatile("sd %0, 10*8(s0)" ::"r"(character));
 1077              		.loc 1 157 36 is_stmt 0
 1078 030c 97000000 		call	__getc
 1078      E7800000 
GAS LISTING /tmp/ccgxMJ4d.s 			page 31


 1079              	.LVL83:
 158:src/riscv.cpp ****         }
 1080              		.loc 1 158 13 is_stmt 1
 158:src/riscv.cpp ****         }
 1081              		.loc 1 158 65 is_stmt 0
 1082              	#APP
 1083              	# 158 "src/riscv.cpp" 1
 1084              		sd a0, 10*8(s0)
 1085              	# 0 "" 2
 1086              	#NO_APP
 1087              	.LBE133:
 1088 0318 6FF09FE2 		j	.L6
 1089              	.LVL84:
 1090              	.L37:
 1091              	.LBE139:
 1092              	.LBE146:
 1093              	.LBE154:
 1094              	.LBE163:
 1095              	.LBE173:
 1096              	.LBE190:
 1097              	.LBE200:
 1098              	.LBE212:
 1099              	.LBE223:
 1100              	.LBE237:
 1101              	.LBE251:
 1102              	.LBE266:
 1103              	.LBE285:
 1104              	.LBE300:
 1105              	.LBB301:
 1106              	.LBB98:
 172:src/riscv.cpp ****         TCB::timeSliceCounter++;
 1107              		.loc 1 172 9 is_stmt 1
 1108              	.LBB99:
 1109              	.LBB100:
 140:src/../h/riscv.hpp **** }
 1110              		.loc 2 140 5
 140:src/../h/riscv.hpp **** }
 1111              		.loc 2 140 64 is_stmt 0
 1112 031c 93072000 		li	a5,2
 1113              	#APP
 1114              	# 140 "src/../h/riscv.hpp" 1
 1115              		csrc sip, a5
 1116              	# 0 "" 2
 1117              	.LVL85:
 1118              	#NO_APP
 1119              	.LBE100:
 1120              	.LBE99:
 173:src/riscv.cpp ****         TCB::checkSleepingList(); //wakes up sleeping threads if sleep time exceeded
 1121              		.loc 1 173 9 is_stmt 1
 173:src/riscv.cpp ****         TCB::checkSleepingList(); //wakes up sleeping threads if sleep time exceeded
 1122              		.loc 1 173 30 is_stmt 0
 1123 0324 97040000 		lla	s1,_ZN3TCB16timeSliceCounterE
 1123      93840400 
 1124 032c 83B70400 		ld	a5,0(s1)
 1125 0330 93871700 		addi	a5,a5,1
 1126 0334 23B0F400 		sd	a5,0(s1)
 174:src/riscv.cpp ****         mySem::checkAllTimedSems(); //wakes up timed-waiting threads waitinng on semaphores
GAS LISTING /tmp/ccgxMJ4d.s 			page 32


 1127              		.loc 1 174 9 is_stmt 1
 174:src/riscv.cpp ****         mySem::checkAllTimedSems(); //wakes up timed-waiting threads waitinng on semaphores
 1128              		.loc 1 174 31 is_stmt 0
 1129 0338 97000000 		call	_ZN3TCB17checkSleepingListEv
 1129      E7800000 
 1130              	.LVL86:
 175:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 1131              		.loc 1 175 9 is_stmt 1
 175:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 1132              		.loc 1 175 33 is_stmt 0
 1133 0340 97000000 		call	_ZN5mySem17checkAllTimedSemsEv
 1133      E7800000 
 1134              	.LVL87:
 176:src/riscv.cpp ****         {
 1135              		.loc 1 176 9 is_stmt 1
 1136              	.LBB101:
 176:src/riscv.cpp ****         {
 1137              		.loc 1 176 64 is_stmt 0
 1138 0348 97070000 		lla	a5,_ZN3TCB7runningE
 1138      93870700 
 1139 0350 83B70700 		ld	a5,0(a5)
 1140              	.LVL88:
 1141              	.LBB102:
 1142              	.LBB103:
  22:src/../h/tcb.hpp **** 
  23:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 1143              		.loc 3 23 35 is_stmt 1
 1144              		.loc 3 23 42 is_stmt 0
 1145 0354 83B78702 		ld	a5,40(a5)
 1146              	.LVL89:
 1147              	.LBE103:
 1148              	.LBE102:
 176:src/riscv.cpp ****         {
 1149              		.loc 1 176 35
 1150 0358 03B70400 		ld	a4,0(s1)
 176:src/riscv.cpp ****         {
 1151              		.loc 1 176 9
 1152 035c E36AF7DE 		bltu	a4,a5,.L3
 1153              	.LBB104:
 178:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 1154              		.loc 1 178 13 is_stmt 1
 1155              	.LBB105:
 1156              	.LBB106:
  99:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 1157              		.loc 2 99 5
 100:src/../h/riscv.hpp ****     return sepc;
 1158              		.loc 2 100 5
 100:src/../h/riscv.hpp ****     return sepc;
 1159              		.loc 2 100 64 is_stmt 0
 1160              	#APP
 1161              	# 100 "src/../h/riscv.hpp" 1
 1162              		csrr a5, sepc
 1163              	# 0 "" 2
 1164              	#NO_APP
 1165 0364 233CF4FC 		sd	a5,-40(s0)
 101:src/../h/riscv.hpp **** }
 1166              		.loc 2 101 5 is_stmt 1
GAS LISTING /tmp/ccgxMJ4d.s 			page 33


 101:src/../h/riscv.hpp **** }
 1167              		.loc 2 101 12 is_stmt 0
 1168 0368 833784FD 		ld	a5,-40(s0)
 1169              	.LBE106:
 1170              	.LBE105:
 178:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 1171              		.loc 1 178 43
 1172 036c 2334F4FA 		sd	a5,-88(s0)
 179:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 1173              		.loc 1 179 13 is_stmt 1
 1174              	.LBB107:
 1175              	.LBB108:
 167:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 1176              		.loc 2 167 5
 168:src/../h/riscv.hpp ****     return sstatus;
 1177              		.loc 2 168 5
 168:src/../h/riscv.hpp ****     return sstatus;
 1178              		.loc 2 168 76 is_stmt 0
 1179              	#APP
 1180              	# 168 "src/../h/riscv.hpp" 1
 1181              		csrr a5, sstatus
 1182              	# 0 "" 2
 1183              	#NO_APP
 1184 0374 2338F4FC 		sd	a5,-48(s0)
 169:src/../h/riscv.hpp **** }
 1185              		.loc 2 169 5 is_stmt 1
 169:src/../h/riscv.hpp **** }
 1186              		.loc 2 169 12 is_stmt 0
 1187 0378 833704FD 		ld	a5,-48(s0)
 1188              	.LBE108:
 1189              	.LBE107:
 179:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 1190              		.loc 1 179 49
 1191 037c 2338F4FA 		sd	a5,-80(s0)
 180:src/riscv.cpp ****             TCB::dispatch();
 1192              		.loc 1 180 13 is_stmt 1
 180:src/riscv.cpp ****             TCB::dispatch();
 1193              		.loc 1 180 35 is_stmt 0
 1194 0380 97070000 		sd	zero,_ZN3TCB16timeSliceCounterE,a5
 1194      23B00700 
 181:src/riscv.cpp ****             w_sstatus(sstatus);
 1195              		.loc 1 181 13 is_stmt 1
 181:src/riscv.cpp ****             w_sstatus(sstatus);
 1196              		.loc 1 181 26 is_stmt 0
 1197 0388 97000000 		call	_ZN3TCB8dispatchEv
 1197      E7800000 
 1198              	.LVL90:
 182:src/riscv.cpp ****             w_sepc(sepc);
 1199              		.loc 1 182 13 is_stmt 1
 182:src/riscv.cpp ****             w_sepc(sepc);
 1200              		.loc 1 182 22 is_stmt 0
 1201 0390 833704FB 		ld	a5,-80(s0)
 1202              	.LVL91:
 1203              	.LBB109:
 1204              	.LBB110:
 174:src/../h/riscv.hpp **** }
 1205              		.loc 2 174 5 is_stmt 1
GAS LISTING /tmp/ccgxMJ4d.s 			page 34


 174:src/../h/riscv.hpp **** }
 1206              		.loc 2 174 77 is_stmt 0
 1207              	#APP
 1208              	# 174 "src/../h/riscv.hpp" 1
 1209              		csrw sstatus, a5
 1210              	# 0 "" 2
 1211              	.LVL92:
 1212              	#NO_APP
 1213              	.LBE110:
 1214              	.LBE109:
 183:src/riscv.cpp ****         }
 1215              		.loc 1 183 13 is_stmt 1
 183:src/riscv.cpp ****         }
 1216              		.loc 1 183 19 is_stmt 0
 1217 0398 833784FA 		ld	a5,-88(s0)
 1218              	.LVL93:
 1219              	.LBB111:
 1220              	.LBB112:
 106:src/../h/riscv.hpp **** }
 1221              		.loc 2 106 5 is_stmt 1
 106:src/../h/riscv.hpp **** }
 1222              		.loc 2 106 65 is_stmt 0
 1223              	#APP
 1224              	# 106 "src/../h/riscv.hpp" 1
 1225              		csrw sepc, a5
 1226              	# 0 "" 2
 1227              	#NO_APP
 1228 03a0 6FF01FDB 		j	.L3
 1229              	.LBE112:
 1230              	.LBE111:
 1231              	.LBE104:
 1232              	.LBE101:
 1233              	.LBE98:
 1234              	.LBE301:
 1235              	.LBE318:
 1236              		.cfi_endproc
 1237              	.LFE49:
 1239              	.Letext0:
 1240              		.file 6 "src/../h/../lib/hw.h"
 1241              		.file 7 "src/../h/operation_codes.hpp"
 1242              		.file 8 "src/../h/../h/MemoryAllocator.hpp"
 1243              		.file 9 "src/../h/syscall_c.hpp"
 1244              		.file 10 "src/../lib/console.h"
GAS LISTING /tmp/ccgxMJ4d.s 			page 35


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccgxMJ4d.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccgxMJ4d.s:13     .text:0000000000000000 .L0 
     /tmp/ccgxMJ4d.s:14     .text:0000000000000000 .L0 
     /tmp/ccgxMJ4d.s:15     .text:0000000000000004 .L0 
     /tmp/ccgxMJ4d.s:17     .text:0000000000000008 .L0 
     /tmp/ccgxMJ4d.s:19     .text:000000000000000c .L0 
     /tmp/ccgxMJ4d.s:25     .text:000000000000000c .L0 
     /tmp/ccgxMJ4d.s:26     .text:000000000000000c .L0 
     /tmp/ccgxMJ4d.s:27     .text:000000000000000c .L0 
     /tmp/ccgxMJ4d.s:37     .text:0000000000000014 .L0 
       src/riscv.cpp:13     .text:0000000000000014 .L0 
     /tmp/ccgxMJ4d.s:43     .text:0000000000000018 .L0 
       src/riscv.cpp:14     .text:0000000000000018 .L0 
     /tmp/ccgxMJ4d.s:49     .text:000000000000001c .L0 
     /tmp/ccgxMJ4d.s:50     .text:0000000000000020 .L0 
     /tmp/ccgxMJ4d.s:52     .text:0000000000000024 .L0 
     /tmp/ccgxMJ4d.s:54     .text:0000000000000028 .L0 
     /tmp/ccgxMJ4d.s:60     .text:0000000000000028 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccgxMJ4d.s:63     .text:0000000000000028 .L0 
     /tmp/ccgxMJ4d.s:64     .text:0000000000000028 .L0 
     /tmp/ccgxMJ4d.s:65     .text:000000000000002c .L0 
     /tmp/ccgxMJ4d.s:70     .text:000000000000003c .L0 
     /tmp/ccgxMJ4d.s:71     .text:000000000000003c .L0 
     /tmp/ccgxMJ4d.s:72     .text:000000000000003c .L0 
     /tmp/ccgxMJ4d.s:73     .text:000000000000003c .L0 
     /tmp/ccgxMJ4d.s:75     .text:0000000000000040 .L0 
     /tmp/ccgxMJ4d.s:79     .text:0000000000000040 .L0 
     /tmp/ccgxMJ4d.s:80     .text:0000000000000040 .L0 
     /tmp/ccgxMJ4d.s:81     .text:0000000000000040 .L0 
  src/../h/riscv.hpp:88     .text:0000000000000040 .L0 
     /tmp/ccgxMJ4d.s:89     .text:0000000000000048 .L0 
     /tmp/ccgxMJ4d.s:90     .text:0000000000000048 .L0 
     /tmp/ccgxMJ4d.s:96     .text:000000000000004c .L0 
     /tmp/ccgxMJ4d.s:97     .text:000000000000004c .L0 
     /tmp/ccgxMJ4d.s:99     .text:0000000000000050 .L0 
     /tmp/ccgxMJ4d.s:105    .text:0000000000000058 .L0 
     /tmp/ccgxMJ4d.s:110    .text:0000000000000068 .L0 
     /tmp/ccgxMJ4d.s:115    .text:0000000000000078 .L0 
     /tmp/ccgxMJ4d.s:116    .text:0000000000000078 .L0 
     /tmp/ccgxMJ4d.s:121    .text:0000000000000080 .L0 
     /tmp/ccgxMJ4d.s:129    .text:0000000000000084 .L0 
     /tmp/ccgxMJ4d.s:130    .text:0000000000000084 .L0 
     /tmp/ccgxMJ4d.s:131    .text:0000000000000084 .L0 
  src/../h/riscv.hpp:100    .text:0000000000000084 .L0 
     /tmp/ccgxMJ4d.s:139    .text:000000000000008c .L0 
     /tmp/ccgxMJ4d.s:140    .text:000000000000008c .L0 
     /tmp/ccgxMJ4d.s:144    .text:0000000000000090 .L0 
     /tmp/ccgxMJ4d.s:146    .text:0000000000000094 .L0 
     /tmp/ccgxMJ4d.s:150    .text:0000000000000098 .L0 
     /tmp/ccgxMJ4d.s:151    .text:0000000000000098 .L0 
     /tmp/ccgxMJ4d.s:152    .text:0000000000000098 .L0 
  src/../h/riscv.hpp:168    .text:0000000000000098 .L0 
     /tmp/ccgxMJ4d.s:160    .text:00000000000000a0 .L0 
     /tmp/ccgxMJ4d.s:161    .text:00000000000000a0 .L0 
     /tmp/ccgxMJ4d.s:165    .text:00000000000000a4 .L0 
GAS LISTING /tmp/ccgxMJ4d.s 			page 36


     /tmp/ccgxMJ4d.s:167    .text:00000000000000a8 .L0 
     /tmp/ccgxMJ4d.s:168    .text:00000000000000a8 .L0 
       src/riscv.cpp:26     .text:00000000000000a8 .L0 
     /tmp/ccgxMJ4d.s:177    .text:00000000000000ac .L0 
     /tmp/ccgxMJ4d.s:188    .text:00000000000000b4 .L0 
     /tmp/ccgxMJ4d.s:200    .text:00000000000000bc .L0 
     /tmp/ccgxMJ4d.s:214    .text:00000000000000c4 .L0 
     /tmp/ccgxMJ4d.s:230    .text:00000000000000cc .L0 
     /tmp/ccgxMJ4d.s:248    .text:00000000000000d4 .L0 
     /tmp/ccgxMJ4d.s:268    .text:00000000000000dc .L0 
     /tmp/ccgxMJ4d.s:290    .text:00000000000000e4 .L0 
     /tmp/ccgxMJ4d.s:314    .text:00000000000000ec .L0 
     /tmp/ccgxMJ4d.s:340    .text:00000000000000f4 .L0 
     /tmp/ccgxMJ4d.s:368    .text:00000000000000fc .L0 
     /tmp/ccgxMJ4d.s:398    .text:0000000000000104 .L0 
     /tmp/ccgxMJ4d.s:430    .text:000000000000010c .L0 
     /tmp/ccgxMJ4d.s:464    .text:0000000000000114 .L0 
     /tmp/ccgxMJ4d.s:468    .text:000000000000011c .L0 
     /tmp/ccgxMJ4d.s:469    .text:000000000000011c .L0 
       src/riscv.cpp:162    .text:000000000000011c .L0 
     /tmp/ccgxMJ4d.s:476    .text:0000000000000120 .L0 
     /tmp/ccgxMJ4d.s:478    .text:0000000000000120 .L0 
     /tmp/ccgxMJ4d.s:500    .text:0000000000000130 .L0 
     /tmp/ccgxMJ4d.s:501    .text:0000000000000130 .L0 
       src/riscv.cpp:31     .text:0000000000000130 .L0 
     /tmp/ccgxMJ4d.s:508    .text:0000000000000134 .L0 
     /tmp/ccgxMJ4d.s:510    .text:0000000000000134 .L0 
     /tmp/ccgxMJ4d.s:513    .text:000000000000013c .L0 
       src/riscv.cpp:33     .text:000000000000013c .L0 
     /tmp/ccgxMJ4d.s:524    .text:0000000000000140 .L0 
     /tmp/ccgxMJ4d.s:525    .text:0000000000000140 .L0 
     /tmp/ccgxMJ4d.s:530    .text:0000000000000144 .L0 
  src/../h/riscv.hpp:174    .text:0000000000000144 .L0 
     /tmp/ccgxMJ4d.s:540    .text:0000000000000148 .L0 
     /tmp/ccgxMJ4d.s:541    .text:0000000000000148 .L0 
     /tmp/ccgxMJ4d.s:546    .text:000000000000014c .L0 
  src/../h/riscv.hpp:106    .text:000000000000014c .L0 
     /tmp/ccgxMJ4d.s:559    .text:0000000000000150 .L0 
     /tmp/ccgxMJ4d.s:560    .text:0000000000000154 .L0 
     /tmp/ccgxMJ4d.s:561    .text:0000000000000154 .L0 
     /tmp/ccgxMJ4d.s:563    .text:0000000000000158 .L0 
     /tmp/ccgxMJ4d.s:565    .text:000000000000015c .L0 
     /tmp/ccgxMJ4d.s:567    .text:0000000000000160 .L0 
     /tmp/ccgxMJ4d.s:569    .text:0000000000000164 .L0 
     /tmp/ccgxMJ4d.s:573    .text:0000000000000168 .L0 
     /tmp/ccgxMJ4d.s:580    .text:0000000000000168 .L0 
     /tmp/ccgxMJ4d.s:581    .text:0000000000000168 .L0 
       src/riscv.cpp:38     .text:0000000000000168 .L0 
     /tmp/ccgxMJ4d.s:588    .text:000000000000016c .L0 
     /tmp/ccgxMJ4d.s:590    .text:000000000000016c .L0 
     /tmp/ccgxMJ4d.s:593    .text:0000000000000174 .L0 
       src/riscv.cpp:40     .text:0000000000000174 .L0 
     /tmp/ccgxMJ4d.s:606    .text:000000000000017c .L0 
     /tmp/ccgxMJ4d.s:607    .text:000000000000017c .L0 
       src/riscv.cpp:45     .text:000000000000017c .L0 
     /tmp/ccgxMJ4d.s:614    .text:0000000000000180 .L0 
     /tmp/ccgxMJ4d.s:615    .text:0000000000000180 .L0 
GAS LISTING /tmp/ccgxMJ4d.s 			page 37


       src/riscv.cpp:47     .text:0000000000000180 .L0 
     /tmp/ccgxMJ4d.s:621    .text:0000000000000184 .L0 
     /tmp/ccgxMJ4d.s:622    .text:0000000000000184 .L0 
       src/riscv.cpp:49     .text:0000000000000184 .L0 
     /tmp/ccgxMJ4d.s:628    .text:0000000000000188 .L0 
     /tmp/ccgxMJ4d.s:629    .text:0000000000000188 .L0 
       src/riscv.cpp:51     .text:0000000000000188 .L0 
     /tmp/ccgxMJ4d.s:635    .text:000000000000018c .L0 
     /tmp/ccgxMJ4d.s:637    .text:000000000000018c .L0 
     /tmp/ccgxMJ4d.s:640    .text:0000000000000194 .L0 
     /tmp/ccgxMJ4d.s:643    .text:0000000000000198 .L0 
     /tmp/ccgxMJ4d.s:644    .text:0000000000000198 .L0 
     /tmp/ccgxMJ4d.s:646    .text:000000000000019c .L0 
     /tmp/ccgxMJ4d.s:650    .text:00000000000001a0 .L0 
       src/riscv.cpp:57     .text:00000000000001a0 .L0 
     /tmp/ccgxMJ4d.s:662    .text:00000000000001a8 .L0 
     /tmp/ccgxMJ4d.s:669    .text:00000000000001b0 .L0 
     /tmp/ccgxMJ4d.s:670    .text:00000000000001b0 .L0 
     /tmp/ccgxMJ4d.s:677    .text:00000000000001bc .L0 
     /tmp/ccgxMJ4d.s:678    .text:00000000000001bc .L0 
     /tmp/ccgxMJ4d.s:686    .text:00000000000001c8 .L0 
     /tmp/ccgxMJ4d.s:687    .text:00000000000001c8 .L0 
     /tmp/ccgxMJ4d.s:693    .text:00000000000001d0 .L0 
     /tmp/ccgxMJ4d.s:694    .text:00000000000001d0 .L0 
     /tmp/ccgxMJ4d.s:702    .text:00000000000001dc .L0 
     /tmp/ccgxMJ4d.s:703    .text:00000000000001dc .L0 
       src/riscv.cpp:70     .text:00000000000001dc .L0 
     /tmp/ccgxMJ4d.s:710    .text:00000000000001e0 .L0 
     /tmp/ccgxMJ4d.s:712    .text:00000000000001e0 .L0 
     /tmp/ccgxMJ4d.s:726    .text:00000000000001fc .L0 
     /tmp/ccgxMJ4d.s:727    .text:00000000000001fc .L0 
       src/riscv.cpp:76     .text:00000000000001fc .L0 
     /tmp/ccgxMJ4d.s:734    .text:0000000000000200 .L0 
     /tmp/ccgxMJ4d.s:735    .text:0000000000000200 .L0 
       src/riscv.cpp:78     .text:0000000000000200 .L0 
     /tmp/ccgxMJ4d.s:753    .text:0000000000000204 .L0 
     /tmp/ccgxMJ4d.s:767    .text:0000000000000204 .L0 
     /tmp/ccgxMJ4d.s:768    .text:0000000000000204 .L0 
     /tmp/ccgxMJ4d.s:769    .text:0000000000000204 .L0 
     /tmp/ccgxMJ4d.s:777    .text:0000000000000210 .L0 
     /tmp/ccgxMJ4d.s:784    .text:0000000000000218 .L0 
     /tmp/ccgxMJ4d.s:791    .text:0000000000000224 .L0 
     /tmp/ccgxMJ4d.s:797    .text:0000000000000228 .L0 
     /tmp/ccgxMJ4d.s:800    .text:000000000000022c .L0 
     /tmp/ccgxMJ4d.s:801    .text:000000000000022c .L0 
     /tmp/ccgxMJ4d.s:803    .text:0000000000000230 .L0 
     /tmp/ccgxMJ4d.s:807    .text:0000000000000234 .L0 
       src/riscv.cpp:83     .text:0000000000000234 .L0 
     /tmp/ccgxMJ4d.s:819    .text:000000000000023c .L0 
     /tmp/ccgxMJ4d.s:827    .text:0000000000000244 .L0 
     /tmp/ccgxMJ4d.s:828    .text:0000000000000244 .L0 
       src/riscv.cpp:87     .text:0000000000000244 .L0 
     /tmp/ccgxMJ4d.s:835    .text:0000000000000248 .L0 
     /tmp/ccgxMJ4d.s:839    .text:0000000000000248 .L0 
     /tmp/ccgxMJ4d.s:840    .text:0000000000000248 .L0 
     /tmp/ccgxMJ4d.s:841    .text:0000000000000248 .L0 
     /tmp/ccgxMJ4d.s:846    .text:000000000000024c .L0 
GAS LISTING /tmp/ccgxMJ4d.s 			page 38


     /tmp/ccgxMJ4d.s:848    .text:0000000000000250 .L0 
     /tmp/ccgxMJ4d.s:852    .text:0000000000000254 .L0 
       src/riscv.cpp:97     .text:0000000000000254 .L0 
     /tmp/ccgxMJ4d.s:864    .text:000000000000025c .L0 
     /tmp/ccgxMJ4d.s:865    .text:000000000000025c .L0 
     /tmp/ccgxMJ4d.s:868    .text:0000000000000264 .L0 
     /tmp/ccgxMJ4d.s:876    .text:000000000000026c .L0 
     /tmp/ccgxMJ4d.s:877    .text:000000000000026c .L0 
       src/riscv.cpp:101    .text:000000000000026c .L0 
     /tmp/ccgxMJ4d.s:884    .text:0000000000000270 .L0 
     /tmp/ccgxMJ4d.s:888    .text:0000000000000270 .L0 
     /tmp/ccgxMJ4d.s:889    .text:0000000000000270 .L0 
     /tmp/ccgxMJ4d.s:890    .text:0000000000000270 .L0 
     /tmp/ccgxMJ4d.s:895    .text:0000000000000274 .L0 
     /tmp/ccgxMJ4d.s:897    .text:0000000000000278 .L0 
     /tmp/ccgxMJ4d.s:901    .text:000000000000027c .L0 
       src/riscv.cpp:110    .text:000000000000027c .L0 
     /tmp/ccgxMJ4d.s:913    .text:0000000000000284 .L0 
     /tmp/ccgxMJ4d.s:914    .text:0000000000000284 .L0 
     /tmp/ccgxMJ4d.s:917    .text:000000000000028c .L0 
     /tmp/ccgxMJ4d.s:925    .text:0000000000000294 .L0 
     /tmp/ccgxMJ4d.s:926    .text:0000000000000294 .L0 
       src/riscv.cpp:114    .text:0000000000000294 .L0 
     /tmp/ccgxMJ4d.s:933    .text:0000000000000298 .L0 
     /tmp/ccgxMJ4d.s:937    .text:0000000000000298 .L0 
     /tmp/ccgxMJ4d.s:938    .text:0000000000000298 .L0 
     /tmp/ccgxMJ4d.s:939    .text:0000000000000298 .L0 
     /tmp/ccgxMJ4d.s:944    .text:000000000000029c .L0 
     /tmp/ccgxMJ4d.s:946    .text:00000000000002a0 .L0 
     /tmp/ccgxMJ4d.s:950    .text:00000000000002a4 .L0 
       src/riscv.cpp:124    .text:00000000000002a4 .L0 
     /tmp/ccgxMJ4d.s:962    .text:00000000000002ac .L0 
     /tmp/ccgxMJ4d.s:963    .text:00000000000002ac .L0 
     /tmp/ccgxMJ4d.s:966    .text:00000000000002b4 .L0 
     /tmp/ccgxMJ4d.s:974    .text:00000000000002bc .L0 
     /tmp/ccgxMJ4d.s:975    .text:00000000000002bc .L0 
       src/riscv.cpp:128    .text:00000000000002bc .L0 
     /tmp/ccgxMJ4d.s:982    .text:00000000000002c0 .L0 
     /tmp/ccgxMJ4d.s:983    .text:00000000000002c0 .L0 
       src/riscv.cpp:130    .text:00000000000002c0 .L0 
     /tmp/ccgxMJ4d.s:989    .text:00000000000002c4 .L0 
     /tmp/ccgxMJ4d.s:993    .text:00000000000002c4 .L0 
     /tmp/ccgxMJ4d.s:994    .text:00000000000002c4 .L0 
     /tmp/ccgxMJ4d.s:995    .text:00000000000002c4 .L0 
     /tmp/ccgxMJ4d.s:1000   .text:00000000000002c8 .L0 
     /tmp/ccgxMJ4d.s:1002   .text:00000000000002cc .L0 
     /tmp/ccgxMJ4d.s:1006   .text:00000000000002d0 .L0 
       src/riscv.cpp:139    .text:00000000000002d0 .L0 
     /tmp/ccgxMJ4d.s:1018   .text:00000000000002d8 .L0 
     /tmp/ccgxMJ4d.s:1019   .text:00000000000002d8 .L0 
     /tmp/ccgxMJ4d.s:1022   .text:00000000000002e0 .L0 
     /tmp/ccgxMJ4d.s:1030   .text:00000000000002e8 .L0 
     /tmp/ccgxMJ4d.s:1031   .text:00000000000002e8 .L0 
       src/riscv.cpp:144    .text:00000000000002e8 .L0 
     /tmp/ccgxMJ4d.s:1038   .text:00000000000002ec .L0 
     /tmp/ccgxMJ4d.s:1042   .text:00000000000002ec .L0 
     /tmp/ccgxMJ4d.s:1043   .text:00000000000002ec .L0 
GAS LISTING /tmp/ccgxMJ4d.s 			page 39


     /tmp/ccgxMJ4d.s:1044   .text:00000000000002ec .L0 
     /tmp/ccgxMJ4d.s:1049   .text:00000000000002f0 .L0 
     /tmp/ccgxMJ4d.s:1051   .text:00000000000002f4 .L0 
     /tmp/ccgxMJ4d.s:1055   .text:00000000000002f8 .L0 
       src/riscv.cpp:154    .text:00000000000002f8 .L0 
     /tmp/ccgxMJ4d.s:1067   .text:0000000000000300 .L0 
     /tmp/ccgxMJ4d.s:1068   .text:0000000000000300 .L0 
     /tmp/ccgxMJ4d.s:1077   .text:000000000000030c .L0 
     /tmp/ccgxMJ4d.s:1078   .text:000000000000030c .L0 
     /tmp/ccgxMJ4d.s:1081   .text:0000000000000314 .L0 
       src/riscv.cpp:158    .text:0000000000000314 .L0 
     /tmp/ccgxMJ4d.s:1110   .text:000000000000031c .L0 
     /tmp/ccgxMJ4d.s:1111   .text:000000000000031c .L0 
     /tmp/ccgxMJ4d.s:1112   .text:000000000000031c .L0 
     /tmp/ccgxMJ4d.s:1122   .text:0000000000000324 .L0 
     /tmp/ccgxMJ4d.s:1123   .text:0000000000000324 .L0 
     /tmp/ccgxMJ4d.s:1128   .text:0000000000000338 .L0 
     /tmp/ccgxMJ4d.s:1129   .text:0000000000000338 .L0 
     /tmp/ccgxMJ4d.s:1132   .text:0000000000000340 .L0 
     /tmp/ccgxMJ4d.s:1133   .text:0000000000000340 .L0 
     /tmp/ccgxMJ4d.s:1137   .text:0000000000000348 .L0 
     /tmp/ccgxMJ4d.s:1138   .text:0000000000000348 .L0 
     /tmp/ccgxMJ4d.s:1144   .text:0000000000000354 .L0 
     /tmp/ccgxMJ4d.s:1145   .text:0000000000000354 .L0 
     /tmp/ccgxMJ4d.s:1150   .text:0000000000000358 .L0 
     /tmp/ccgxMJ4d.s:1152   .text:000000000000035c .L0 
     /tmp/ccgxMJ4d.s:1157   .text:0000000000000360 .L0 
     /tmp/ccgxMJ4d.s:1158   .text:0000000000000360 .L0 
     /tmp/ccgxMJ4d.s:1159   .text:0000000000000360 .L0 
  src/../h/riscv.hpp:100    .text:0000000000000360 .L0 
     /tmp/ccgxMJ4d.s:1167   .text:0000000000000368 .L0 
     /tmp/ccgxMJ4d.s:1168   .text:0000000000000368 .L0 
     /tmp/ccgxMJ4d.s:1172   .text:000000000000036c .L0 
     /tmp/ccgxMJ4d.s:1176   .text:0000000000000370 .L0 
     /tmp/ccgxMJ4d.s:1177   .text:0000000000000370 .L0 
     /tmp/ccgxMJ4d.s:1178   .text:0000000000000370 .L0 
  src/../h/riscv.hpp:168    .text:0000000000000370 .L0 
     /tmp/ccgxMJ4d.s:1186   .text:0000000000000378 .L0 
     /tmp/ccgxMJ4d.s:1187   .text:0000000000000378 .L0 
     /tmp/ccgxMJ4d.s:1191   .text:000000000000037c .L0 
     /tmp/ccgxMJ4d.s:1193   .text:0000000000000380 .L0 
     /tmp/ccgxMJ4d.s:1194   .text:0000000000000380 .L0 
     /tmp/ccgxMJ4d.s:1196   .text:0000000000000388 .L0 
     /tmp/ccgxMJ4d.s:1197   .text:0000000000000388 .L0 
     /tmp/ccgxMJ4d.s:1200   .text:0000000000000390 .L0 
     /tmp/ccgxMJ4d.s:1201   .text:0000000000000390 .L0 
     /tmp/ccgxMJ4d.s:1206   .text:0000000000000394 .L0 
  src/../h/riscv.hpp:174    .text:0000000000000394 .L0 
     /tmp/ccgxMJ4d.s:1216   .text:0000000000000398 .L0 
     /tmp/ccgxMJ4d.s:1217   .text:0000000000000398 .L0 
     /tmp/ccgxMJ4d.s:1222   .text:000000000000039c .L0 
  src/../h/riscv.hpp:106    .text:000000000000039c .L0 
     /tmp/ccgxMJ4d.s:1236   .text:00000000000003a4 .L0 
     /tmp/ccgxMJ4d.s:1245   .text:00000000000003a4 .L0 
     /tmp/ccgxMJ4d.s:678    .text:00000000000001bc .L0 
     /tmp/ccgxMJ4d.s:714    .text:00000000000001e4 .L0 
     /tmp/ccgxMJ4d.s:1123   .text:0000000000000324 .L0 
GAS LISTING /tmp/ccgxMJ4d.s 			page 40


     /tmp/ccgxMJ4d.s:1138   .text:0000000000000348 .L0 
     /tmp/ccgxMJ4d.s:1194   .text:0000000000000380 .L0 
     /tmp/ccgxMJ4d.s:123    .text:0000000000000084 .L36
     /tmp/ccgxMJ4d.s:1090   .text:000000000000031c .L37
     /tmp/ccgxMJ4d.s:553    .text:0000000000000150 .L3
     /tmp/ccgxMJ4d.s:484    .text:0000000000000130 .L38
     /tmp/ccgxMJ4d.s:572    .text:0000000000000168 .L39
     /tmp/ccgxMJ4d.s:602    .text:000000000000017c .L40
     /tmp/ccgxMJ4d.s:665    .text:00000000000001b0 .L41
     /tmp/ccgxMJ4d.s:674    .text:00000000000001bc .L42
     /tmp/ccgxMJ4d.s:698    .text:00000000000001dc .L43
     /tmp/ccgxMJ4d.s:722    .text:00000000000001fc .L44
     /tmp/ccgxMJ4d.s:822    .text:0000000000000244 .L45
     /tmp/ccgxMJ4d.s:871    .text:000000000000026c .L46
     /tmp/ccgxMJ4d.s:920    .text:0000000000000294 .L47
     /tmp/ccgxMJ4d.s:969    .text:00000000000002bc .L48
     /tmp/ccgxMJ4d.s:1025   .text:00000000000002e8 .L49
     /tmp/ccgxMJ4d.s:1072   .text:000000000000030c .L50
     /tmp/ccgxMJ4d.s:520    .text:0000000000000140 .L6
     /tmp/ccgxMJ4d.s:659    .text:00000000000001a8 .L28
     /tmp/ccgxMJ4d.s:647    .text:00000000000001a0 .L9
     /tmp/ccgxMJ4d.s:816    .text:000000000000023c .L29
     /tmp/ccgxMJ4d.s:804    .text:0000000000000234 .L14
     /tmp/ccgxMJ4d.s:861    .text:000000000000025c .L51
     /tmp/ccgxMJ4d.s:850    .text:0000000000000254 .L16
     /tmp/ccgxMJ4d.s:910    .text:0000000000000284 .L52
     /tmp/ccgxMJ4d.s:899    .text:000000000000027c .L18
     /tmp/ccgxMJ4d.s:959    .text:00000000000002ac .L53
     /tmp/ccgxMJ4d.s:948    .text:00000000000002a4 .L20
     /tmp/ccgxMJ4d.s:1015   .text:00000000000002d8 .L54
     /tmp/ccgxMJ4d.s:1004   .text:00000000000002d0 .L22
     /tmp/ccgxMJ4d.s:1064   .text:0000000000000300 .L55
     /tmp/ccgxMJ4d.s:1053   .text:00000000000002f8 .L24
     /tmp/ccgxMJ4d.s:3526   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccgxMJ4d.s:5475   .debug_str:0000000000000461 .LASF218
     /tmp/ccgxMJ4d.s:5751   .debug_str:0000000000000cc1 .LASF219
     /tmp/ccgxMJ4d.s:5643   .debug_str:00000000000009d4 .LASF220
     /tmp/ccgxMJ4d.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccgxMJ4d.s:1239   .text:00000000000003a4 .Letext0
     /tmp/ccgxMJ4d.s:5315   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccgxMJ4d.s:5457   .debug_str:00000000000003da .LASF0
     /tmp/ccgxMJ4d.s:5489   .debug_str:0000000000000584 .LASF1
     /tmp/ccgxMJ4d.s:5613   .debug_str:00000000000008ee .LASF2
     /tmp/ccgxMJ4d.s:5625   .debug_str:0000000000000955 .LASF4
     /tmp/ccgxMJ4d.s:5467   .debug_str:000000000000041a .LASF3
     /tmp/ccgxMJ4d.s:5329   .debug_str:000000000000007e .LASF5
     /tmp/ccgxMJ4d.s:5575   .debug_str:00000000000007d4 .LASF6
     /tmp/ccgxMJ4d.s:5561   .debug_str:000000000000076d .LASF7
     /tmp/ccgxMJ4d.s:5479   .debug_str:0000000000000542 .LASF8
     /tmp/ccgxMJ4d.s:5425   .debug_str:0000000000000308 .LASF9
     /tmp/ccgxMJ4d.s:5437   .debug_str:0000000000000362 .LASF10
     /tmp/ccgxMJ4d.s:5361   .debug_str:0000000000000160 .LASF11
     /tmp/ccgxMJ4d.s:5417   .debug_str:00000000000002c2 .LASF12
     /tmp/ccgxMJ4d.s:5381   .debug_str:00000000000001d4 .LASF13
     /tmp/ccgxMJ4d.s:5359   .debug_str:0000000000000150 .LASF14
     /tmp/ccgxMJ4d.s:5665   .debug_str:0000000000000a9a .LASF15
     /tmp/ccgxMJ4d.s:5403   .debug_str:0000000000000245 .LASF16
GAS LISTING /tmp/ccgxMJ4d.s 			page 41


     /tmp/ccgxMJ4d.s:5649   .debug_str:0000000000000a03 .LASF17
     /tmp/ccgxMJ4d.s:5773   .debug_str:0000000000000d80 .LASF18
     /tmp/ccgxMJ4d.s:5421   .debug_str:00000000000002f3 .LASF19
     /tmp/ccgxMJ4d.s:5647   .debug_str:00000000000009f5 .LASF20
     /tmp/ccgxMJ4d.s:5583   .debug_str:00000000000007f7 .LASF21
     /tmp/ccgxMJ4d.s:5391   .debug_str:000000000000020a .LASF22
     /tmp/ccgxMJ4d.s:5343   .debug_str:00000000000000e6 .LASF23
     /tmp/ccgxMJ4d.s:5365   .debug_str:0000000000000174 .LASF24
     /tmp/ccgxMJ4d.s:5373   .debug_str:00000000000001ab .LASF25
     /tmp/ccgxMJ4d.s:5535   .debug_str:00000000000006d1 .LASF26
     /tmp/ccgxMJ4d.s:5677   .debug_str:0000000000000acf .LASF27
     /tmp/ccgxMJ4d.s:5689   .debug_str:0000000000000b05 .LASF28
     /tmp/ccgxMJ4d.s:5703   .debug_str:0000000000000b65 .LASF29
     /tmp/ccgxMJ4d.s:5471   .debug_str:000000000000043a .LASF30
     /tmp/ccgxMJ4d.s:5529   .debug_str:00000000000006b0 .LASF31
     /tmp/ccgxMJ4d.s:5735   .debug_str:0000000000000c52 .LASF79
     /tmp/ccgxMJ4d.s:5593   .debug_str:000000000000084e .LASF35
     /tmp/ccgxMJ4d.s:5495   .debug_str:00000000000005a4 .LASF32
     /tmp/ccgxMJ4d.s:5407   .debug_str:0000000000000277 .LASF33
     /tmp/ccgxMJ4d.s:5753   .debug_str:0000000000000ccf .LASF34
     /tmp/ccgxMJ4d.s:5721   .debug_str:0000000000000be9 .LASF36
     /tmp/ccgxMJ4d.s:5409   .debug_str:0000000000000280 .LASF37
     /tmp/ccgxMJ4d.s:5683   .debug_str:0000000000000aea .LASF38
     /tmp/ccgxMJ4d.s:5389   .debug_str:00000000000001fe .LASF39
     /tmp/ccgxMJ4d.s:5445   .debug_str:0000000000000390 .LASF72
     /tmp/ccgxMJ4d.s:5453   .debug_str:00000000000003bc .LASF74
     /tmp/ccgxMJ4d.s:5713   .debug_str:0000000000000bb8 .LASF40
     /tmp/ccgxMJ4d.s:5701   .debug_str:0000000000000b50 .LASF42
     /tmp/ccgxMJ4d.s:5609   .debug_str:00000000000008da .LASF44
     /tmp/ccgxMJ4d.s:5549   .debug_str:0000000000000718 .LASF46
     /tmp/ccgxMJ4d.s:5585   .debug_str:0000000000000803 .LASF41
     /tmp/ccgxMJ4d.s:5589   .debug_str:0000000000000827 .LASF43
     /tmp/ccgxMJ4d.s:5541   .debug_str:00000000000006e7 .LASF45
     /tmp/ccgxMJ4d.s:5481   .debug_str:0000000000000555 .LASF47
     /tmp/ccgxMJ4d.s:5749   .debug_str:0000000000000cb9 .LASF48
     /tmp/ccgxMJ4d.s:5661   .debug_str:0000000000000a79 .LASF49
     /tmp/ccgxMJ4d.s:5537   .debug_str:00000000000006da .LASF50
     /tmp/ccgxMJ4d.s:5547   .debug_str:0000000000000704 .LASF51
     /tmp/ccgxMJ4d.s:5505   .debug_str:000000000000060c .LASF52
     /tmp/ccgxMJ4d.s:5591   .debug_str:000000000000083a .LASF53
     /tmp/ccgxMJ4d.s:5769   .debug_str:0000000000000d58 .LASF54
     /tmp/ccgxMJ4d.s:5463   .debug_str:00000000000003fc .LASF55
     /tmp/ccgxMJ4d.s:5659   .debug_str:0000000000000a72 .LASF56
     /tmp/ccgxMJ4d.s:5629   .debug_str:0000000000000961 .LASF57
     /tmp/ccgxMJ4d.s:5631   .debug_str:0000000000000974 .LASF58
     /tmp/ccgxMJ4d.s:5367   .debug_str:000000000000017d .LASF59
     /tmp/ccgxMJ4d.s:5401   .debug_str:000000000000023f .LASF60
     /tmp/ccgxMJ4d.s:5451   .debug_str:00000000000003aa .LASF61
     /tmp/ccgxMJ4d.s:5461   .debug_str:00000000000003f6 .LASF62
     /tmp/ccgxMJ4d.s:5393   .debug_str:000000000000021a .LASF63
     /tmp/ccgxMJ4d.s:5331   .debug_str:0000000000000085 .LASF64
     /tmp/ccgxMJ4d.s:5619   .debug_str:0000000000000913 .LASF65
     /tmp/ccgxMJ4d.s:5611   .debug_str:00000000000008e3 .LASF66
     /tmp/ccgxMJ4d.s:5765   .debug_str:0000000000000d33 .LASF67
     /tmp/ccgxMJ4d.s:5739   .debug_str:0000000000000c76 .LASF68
     /tmp/ccgxMJ4d.s:5757   .debug_str:0000000000000ce3 .LASF69
     /tmp/ccgxMJ4d.s:5729   .debug_str:0000000000000c23 .LASF70
GAS LISTING /tmp/ccgxMJ4d.s 			page 42


     /tmp/ccgxMJ4d.s:5523   .debug_str:000000000000066f .LASF71
     /tmp/ccgxMJ4d.s:5747   .debug_str:0000000000000caa .LASF73
     /tmp/ccgxMJ4d.s:5435   .debug_str:0000000000000346 .LASF75
     /tmp/ccgxMJ4d.s:5569   .debug_str:00000000000007a4 .LASF151
     /tmp/ccgxMJ4d.s:5473   .debug_str:000000000000043f .LASF153
     /tmp/ccgxMJ4d.s:5679   .debug_str:0000000000000ada .LASF117
     /tmp/ccgxMJ4d.s:5363   .debug_str:000000000000016f .LASF76
     /tmp/ccgxMJ4d.s:5339   .debug_str:00000000000000d0 .LASF77
     /tmp/ccgxMJ4d.s:5487   .debug_str:000000000000057f .LASF78
     /tmp/ccgxMJ4d.s:5555   .debug_str:0000000000000749 .LASF80
     /tmp/ccgxMJ4d.s:5525   .debug_str:0000000000000685 .LASF81
     /tmp/ccgxMJ4d.s:5333   .debug_str:0000000000000090 .LASF83
     /tmp/ccgxMJ4d.s:5671   .debug_str:0000000000000ab6 .LASF82
     /tmp/ccgxMJ4d.s:5527   .debug_str:000000000000068f .LASF84
     /tmp/ccgxMJ4d.s:5465   .debug_str:0000000000000410 .LASF85
     /tmp/ccgxMJ4d.s:5503   .debug_str:00000000000005e3 .LASF86
     /tmp/ccgxMJ4d.s:5641   .debug_str:00000000000009c9 .LASF87
     /tmp/ccgxMJ4d.s:5655   .debug_str:0000000000000a4a .LASF88
     /tmp/ccgxMJ4d.s:5337   .debug_str:00000000000000b7 .LASF89
     /tmp/ccgxMJ4d.s:5645   .debug_str:00000000000009eb .LASF149
     /tmp/ccgxMJ4d.s:5565   .debug_str:000000000000078a .LASF90
     /tmp/ccgxMJ4d.s:5717   .debug_str:0000000000000bcb .LASF221
     /tmp/ccgxMJ4d.s:5657   .debug_str:0000000000000a6d .LASF91
     /tmp/ccgxMJ4d.s:5539   .debug_str:00000000000006e2 .LASF92
     /tmp/ccgxMJ4d.s:5559   .debug_str:0000000000000765 .LASF93
     /tmp/ccgxMJ4d.s:5531   .debug_str:00000000000006b5 .LASF94
     /tmp/ccgxMJ4d.s:5651   .debug_str:0000000000000a19 .LASF95
     /tmp/ccgxMJ4d.s:5413   .debug_str:000000000000029f .LASF97
     /tmp/ccgxMJ4d.s:5617   .debug_str:0000000000000909 .LASF222
     /tmp/ccgxMJ4d.s:5603   .debug_str:0000000000000896 .LASF223
     /tmp/ccgxMJ4d.s:5501   .debug_str:00000000000005d8 .LASF96
     /tmp/ccgxMJ4d.s:5707   .debug_str:0000000000000b84 .LASF98
     /tmp/ccgxMJ4d.s:5415   .debug_str:00000000000002b6 .LASF99
     /tmp/ccgxMJ4d.s:5737   .debug_str:0000000000000c58 .LASF100
     /tmp/ccgxMJ4d.s:5441   .debug_str:000000000000037a .LASF101
     /tmp/ccgxMJ4d.s:5597   .debug_str:0000000000000864 .LASF102
     /tmp/ccgxMJ4d.s:5595   .debug_str:0000000000000859 .LASF103
     /tmp/ccgxMJ4d.s:5605   .debug_str:00000000000008ad .LASF104
     /tmp/ccgxMJ4d.s:5483   .debug_str:0000000000000568 .LASF105
     /tmp/ccgxMJ4d.s:5353   .debug_str:0000000000000125 .LASF106
     /tmp/ccgxMJ4d.s:5509   .debug_str:000000000000061f .LASF107
     /tmp/ccgxMJ4d.s:5405   .debug_str:000000000000025b .LASF108
     /tmp/ccgxMJ4d.s:5557   .debug_str:0000000000000759 .LASF109
     /tmp/ccgxMJ4d.s:5731   .debug_str:0000000000000c2d .LASF110
     /tmp/ccgxMJ4d.s:5775   .debug_str:0000000000000d8a .LASF111
     /tmp/ccgxMJ4d.s:5761   .debug_str:0000000000000d01 .LASF112
     /tmp/ccgxMJ4d.s:5637   .debug_str:00000000000009a9 .LASF113
     /tmp/ccgxMJ4d.s:5477   .debug_str:0000000000000525 .LASF114
     /tmp/ccgxMJ4d.s:5573   .debug_str:00000000000007cb .LASF115
     /tmp/ccgxMJ4d.s:5323   .debug_str:0000000000000030 .LASF116
     /tmp/ccgxMJ4d.s:5369   .debug_str:0000000000000190 .LASF118
     /tmp/ccgxMJ4d.s:5767   .debug_str:0000000000000d4b .LASF119
     /tmp/ccgxMJ4d.s:5433   .debug_str:000000000000033a .LASF120
     /tmp/ccgxMJ4d.s:5519   .debug_str:000000000000064e .LASF121
     /tmp/ccgxMJ4d.s:5423   .debug_str:00000000000002fc .LASF122
     /tmp/ccgxMJ4d.s:5321   .debug_str:0000000000000020 .LASF123
     /tmp/ccgxMJ4d.s:5513   .debug_str:000000000000062e .LASF124
GAS LISTING /tmp/ccgxMJ4d.s 			page 43


     /tmp/ccgxMJ4d.s:5411   .debug_str:000000000000028c .LASF125
     /tmp/ccgxMJ4d.s:5615   .debug_str:00000000000008fc .LASF126
     /tmp/ccgxMJ4d.s:5627   .debug_str:000000000000095c .LASF127
     /tmp/ccgxMJ4d.s:5327   .debug_str:0000000000000072 .LASF128
     /tmp/ccgxMJ4d.s:5673   .debug_str:0000000000000abf .LASF129
     /tmp/ccgxMJ4d.s:5533   .debug_str:00000000000006ba .LASF130
     /tmp/ccgxMJ4d.s:5349   .debug_str:000000000000010b .LASF131
     /tmp/ccgxMJ4d.s:5551   .debug_str:000000000000072d .LASF132
     /tmp/ccgxMJ4d.s:5517   .debug_str:0000000000000641 .LASF133
     /tmp/ccgxMJ4d.s:5719   .debug_str:0000000000000bd0 .LASF134
     /tmp/ccgxMJ4d.s:5663   .debug_str:0000000000000a8d .LASF135
     /tmp/ccgxMJ4d.s:5419   .debug_str:00000000000002d1 .LASF136
     /tmp/ccgxMJ4d.s:5553   .debug_str:0000000000000744 .LASF224
     /tmp/ccgxMJ4d.s:5491   .debug_str:0000000000000597 .LASF137
     /tmp/ccgxMJ4d.s:5607   .debug_str:00000000000008ca .LASF138
     /tmp/ccgxMJ4d.s:5681   .debug_str:0000000000000ae2 .LASF225
     /tmp/ccgxMJ4d.s:5319   .debug_str:000000000000000e .LASF139
     /tmp/ccgxMJ4d.s:5771   .debug_str:0000000000000d60 .LASF140
     /tmp/ccgxMJ4d.s:5377   .debug_str:00000000000001bb .LASF141
     /tmp/ccgxMJ4d.s:5635   .debug_str:000000000000098c .LASF142
     /tmp/ccgxMJ4d.s:5763   .debug_str:0000000000000d1c .LASF226
     /tmp/ccgxMJ4d.s:5395   .debug_str:000000000000022c .LASF143
     /tmp/ccgxMJ4d.s:5515   .debug_str:000000000000063b .LASF144
     /tmp/ccgxMJ4d.s:5699   .debug_str:0000000000000b48 .LASF145
     /tmp/ccgxMJ4d.s:5693   .debug_str:0000000000000b23 .LASF146
     /tmp/ccgxMJ4d.s:5669   .debug_str:0000000000000aad .LASF147
     /tmp/ccgxMJ4d.s:5697   .debug_str:0000000000000b3e .LASF148
     /tmp/ccgxMJ4d.s:5691   .debug_str:0000000000000b13 .LASF150
     /tmp/ccgxMJ4d.s:5351   .debug_str:0000000000000117 .LASF152
     /tmp/ccgxMJ4d.s:5497   .debug_str:00000000000005ad .LASF154
     /tmp/ccgxMJ4d.s:5385   .debug_str:00000000000001eb .LASF227
     /tmp/ccgxMJ4d.s:5325   .debug_str:000000000000004a .LASF228
     /tmp/ccgxMJ4d.s:5397   .debug_str:0000000000000231 .LASF155
     /tmp/ccgxMJ4d.s:5371   .debug_str:0000000000000198 .LASF156
     /tmp/ccgxMJ4d.s:5633   .debug_str:000000000000097b .LASF157
     /tmp/ccgxMJ4d.s:5623   .debug_str:000000000000094a .LASF158
     /tmp/ccgxMJ4d.s:5755   .debug_str:0000000000000cd8 .LASF159
     /tmp/ccgxMJ4d.s:5601   .debug_str:0000000000000891 .LASF160
     /tmp/ccgxMJ4d.s:5375   .debug_str:00000000000001b5 .LASF161
     /tmp/ccgxMJ4d.s:5443   .debug_str:0000000000000382 .LASF162
     /tmp/ccgxMJ4d.s:5459   .debug_str:00000000000003e7 .LASF163
     /tmp/ccgxMJ4d.s:5469   .debug_str:000000000000042c .LASF164
     /tmp/ccgxMJ4d.s:5335   .debug_str:00000000000000b1 .LASF165
     /tmp/ccgxMJ4d.s:5711   .debug_str:0000000000000ba6 .LASF166
     /tmp/ccgxMJ4d.s:5399   .debug_str:000000000000023a .LASF167
     /tmp/ccgxMJ4d.s:5341   .debug_str:00000000000000d5 .LASF168
     /tmp/ccgxMJ4d.s:5455   .debug_str:00000000000003d4 .LASF169
     /tmp/ccgxMJ4d.s:5571   .debug_str:00000000000007b9 .LASF170
     /tmp/ccgxMJ4d.s:5667   .debug_str:0000000000000aa6 .LASF171
     /tmp/ccgxMJ4d.s:5705   .debug_str:0000000000000b71 .LASF172
     /tmp/ccgxMJ4d.s:5759   .debug_str:0000000000000cf9 .LASF173
     /tmp/ccgxMJ4d.s:5745   .debug_str:0000000000000c96 .LASF174
     /tmp/ccgxMJ4d.s:5727   .debug_str:0000000000000c1b .LASF175
     /tmp/ccgxMJ4d.s:5599   .debug_str:000000000000087d .LASF176
     /tmp/ccgxMJ4d.s:5695   .debug_str:0000000000000b2d .LASF177
     /tmp/ccgxMJ4d.s:5653   .debug_str:0000000000000a2c .LASF178
     /tmp/ccgxMJ4d.s:5521   .debug_str:000000000000065e .LASF179
GAS LISTING /tmp/ccgxMJ4d.s 			page 44


     /tmp/ccgxMJ4d.s:5725   .debug_str:0000000000000bfd .LASF180
     /tmp/ccgxMJ4d.s:5357   .debug_str:0000000000000147 .LASF181
     /tmp/ccgxMJ4d.s:5639   .debug_str:00000000000009b4 .LASF182
     /tmp/ccgxMJ4d.s:5567   .debug_str:0000000000000794 .LASF183
     /tmp/ccgxMJ4d.s:5587   .debug_str:000000000000080a .LASF184
     /tmp/ccgxMJ4d.s:5499   .debug_str:00000000000005c6 .LASF185
     /tmp/ccgxMJ4d.s:5621   .debug_str:000000000000092b .LASF186
     /tmp/ccgxMJ4d.s:5733   .debug_str:0000000000000c4b .LASF187
     /tmp/ccgxMJ4d.s:5577   .debug_str:00000000000007db .LASF188
     /tmp/ccgxMJ4d.s:5741   .debug_str:0000000000000c80 .LASF189
     /tmp/ccgxMJ4d.s:5579   .debug_str:00000000000007e3 .LASF190
     /tmp/ccgxMJ4d.s:5563   .debug_str:0000000000000780 .LASF191
     /tmp/ccgxMJ4d.s:5545   .debug_str:00000000000006f8 .LASF229
     /tmp/ccgxMJ4d.s:5685   .debug_str:0000000000000af7 .LASF192
     /tmp/ccgxMJ4d.s:5427   .debug_str:0000000000000318 .LASF193
     /tmp/ccgxMJ4d.s:5507   .debug_str:0000000000000614 .LASF194
     /tmp/ccgxMJ4d.s:5431   .debug_str:000000000000032e .LASF195
     /tmp/ccgxMJ4d.s:5387   .debug_str:00000000000001f9 .LASF209
     /tmp/ccgxMJ4d.s:5347   .debug_str:00000000000000f8 .LASF211
     /tmp/ccgxMJ4d.s:61     .text:0000000000000028 .LFB49
     /tmp/ccgxMJ4d.s:1237   .text:00000000000003a4 .LFE49
     /tmp/ccgxMJ4d.s:5383   .debug_str:00000000000001e4 .LASF196
     /tmp/ccgxMJ4d.s:4620   .debug_loc:0000000000000000 .LLST1
     /tmp/ccgxMJ4d.s:5235   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccgxMJ4d.s:5449   .debug_str:00000000000003a1 .LASF197
     /tmp/ccgxMJ4d.s:5743   .debug_str:0000000000000c8e .LASF198
     /tmp/ccgxMJ4d.s:4749   .debug_loc:00000000000001d8 .LLST5
     /tmp/ccgxMJ4d.s:498    .text:0000000000000130 .LBB264
     /tmp/ccgxMJ4d.s:521    .text:0000000000000140 .LBE264
     /tmp/ccgxMJ4d.s:4808   .debug_loc:00000000000002f2 .LLST42
     /tmp/ccgxMJ4d.s:5439   .debug_str:0000000000000370 .LASF199
     /tmp/ccgxMJ4d.s:4815   .debug_loc:0000000000000315 .LLST43
     /tmp/ccgxMJ4d.s:511    .text:000000000000013c .LVL11
     /tmp/ccgxMJ4d.s:578    .text:0000000000000168 .LBB249
     /tmp/ccgxMJ4d.s:599    .text:0000000000000178 .LBE249
     /tmp/ccgxMJ4d.s:5355   .debug_str:0000000000000142 .LASF200
     /tmp/ccgxMJ4d.s:4822   .debug_loc:0000000000000338 .LLST40
     /tmp/ccgxMJ4d.s:5379   .debug_str:00000000000001cd .LASF201
     /tmp/ccgxMJ4d.s:4829   .debug_loc:000000000000035b .LLST41
     /tmp/ccgxMJ4d.s:591    .text:0000000000000174 .LVL19
     /tmp/ccgxMJ4d.s:5581   .debug_str:00000000000007f0 .LASF202
     /tmp/ccgxMJ4d.s:4836   .debug_loc:000000000000037e .LLST35
     /tmp/ccgxMJ4d.s:5485   .debug_str:0000000000000571 .LASF203
     /tmp/ccgxMJ4d.s:4843   .debug_loc:00000000000003a1 .LLST36
     /tmp/ccgxMJ4d.s:4850   .debug_loc:00000000000003c4 .LLST37
     /tmp/ccgxMJ4d.s:4857   .debug_loc:00000000000003e7 .LLST38
     /tmp/ccgxMJ4d.s:4864   .debug_loc:000000000000040a .LLST39
     /tmp/ccgxMJ4d.s:638    .text:0000000000000194 .LVL25
     /tmp/ccgxMJ4d.s:700    .text:00000000000001dc .LBB198
     /tmp/ccgxMJ4d.s:719    .text:00000000000001f8 .LBE198
     /tmp/ccgxMJ4d.s:5709   .debug_str:0000000000000ba1 .LASF204
     /tmp/ccgxMJ4d.s:4881   .debug_loc:0000000000000455 .LLST32
     /tmp/ccgxMJ4d.s:718    .text:00000000000001f8 .LVL40
     /tmp/ccgxMJ4d.s:4888   .debug_loc:0000000000000478 .LLST24
     /tmp/ccgxMJ4d.s:5345   .debug_str:00000000000000f3 .LASF205
     /tmp/ccgxMJ4d.s:4895   .debug_loc:000000000000049b .LLST25
     /tmp/ccgxMJ4d.s:4902   .debug_loc:00000000000004be .LLST26
GAS LISTING /tmp/ccgxMJ4d.s 			page 45


     /tmp/ccgxMJ4d.s:764    .text:0000000000000204 .LBB181
     /tmp/ccgxMJ4d.s:795    .text:0000000000000228 .LBE181
     /tmp/ccgxMJ4d.s:4919   .debug_loc:0000000000000509 .LLST27
     /tmp/ccgxMJ4d.s:765    .text:0000000000000204 .LBB182
     /tmp/ccgxMJ4d.s:773    .text:0000000000000210 .LBE182
     /tmp/ccgxMJ4d.s:4926   .debug_loc:000000000000052c .LLST28
     /tmp/ccgxMJ4d.s:771    .text:0000000000000210 .LVL44
     /tmp/ccgxMJ4d.s:774    .text:0000000000000210 .LBB184
     /tmp/ccgxMJ4d.s:794    .text:0000000000000228 .LBE184
     /tmp/ccgxMJ4d.s:4935   .debug_loc:0000000000000551 .LLST29
     /tmp/ccgxMJ4d.s:4942   .debug_loc:0000000000000574 .LLST30
     /tmp/ccgxMJ4d.s:780    .text:0000000000000218 .LBB186
     /tmp/ccgxMJ4d.s:789    .text:0000000000000224 .LBE186
     /tmp/ccgxMJ4d.s:4949   .debug_loc:0000000000000597 .LLST31
     /tmp/ccgxMJ4d.s:4958   .debug_loc:00000000000005bc .LLST21
     /tmp/ccgxMJ4d.s:4969   .debug_loc:00000000000005f2 .LLST22
     /tmp/ccgxMJ4d.s:837    .text:0000000000000248 .LBB170
     /tmp/ccgxMJ4d.s:844    .text:000000000000024c .LBE170
     /tmp/ccgxMJ4d.s:4986   .debug_loc:000000000000063d .LLST23
     /tmp/ccgxMJ4d.s:866    .text:0000000000000264 .LVL56
     /tmp/ccgxMJ4d.s:4993   .debug_loc:0000000000000660 .LLST18
     /tmp/ccgxMJ4d.s:5004   .debug_loc:0000000000000696 .LLST19
     /tmp/ccgxMJ4d.s:886    .text:0000000000000270 .LBB160
     /tmp/ccgxMJ4d.s:893    .text:0000000000000274 .LBE160
     /tmp/ccgxMJ4d.s:5021   .debug_loc:00000000000006e1 .LLST20
     /tmp/ccgxMJ4d.s:915    .text:000000000000028c .LVL62
     /tmp/ccgxMJ4d.s:5028   .debug_loc:0000000000000704 .LLST15
     /tmp/ccgxMJ4d.s:5039   .debug_loc:000000000000073a .LLST16
     /tmp/ccgxMJ4d.s:935    .text:0000000000000298 .LBB151
     /tmp/ccgxMJ4d.s:942    .text:000000000000029c .LBE151
     /tmp/ccgxMJ4d.s:5056   .debug_loc:0000000000000785 .LLST17
     /tmp/ccgxMJ4d.s:964    .text:00000000000002b4 .LVL68
     /tmp/ccgxMJ4d.s:5063   .debug_loc:00000000000007a8 .LLST11
     /tmp/ccgxMJ4d.s:5074   .debug_loc:00000000000007de .LLST12
     /tmp/ccgxMJ4d.s:5085   .debug_loc:0000000000000814 .LLST13
     /tmp/ccgxMJ4d.s:991    .text:00000000000002c4 .LBB143
     /tmp/ccgxMJ4d.s:998    .text:00000000000002c8 .LBE143
     /tmp/ccgxMJ4d.s:5102   .debug_loc:000000000000085f .LLST14
     /tmp/ccgxMJ4d.s:1020   .text:00000000000002e0 .LVL75
     /tmp/ccgxMJ4d.s:5109   .debug_loc:0000000000000882 .LLST8
     /tmp/ccgxMJ4d.s:5120   .debug_loc:00000000000008b8 .LLST9
     /tmp/ccgxMJ4d.s:1040   .text:00000000000002ec .LBB136
     /tmp/ccgxMJ4d.s:1047   .text:00000000000002f0 .LBE136
     /tmp/ccgxMJ4d.s:5141   .debug_loc:0000000000000916 .LLST10
     /tmp/ccgxMJ4d.s:1069   .text:0000000000000308 .LVL81
     /tmp/ccgxMJ4d.s:1075   .text:000000000000030c .LBB133
     /tmp/ccgxMJ4d.s:1087   .text:0000000000000318 .LBE133
     /tmp/ccgxMJ4d.s:5543   .debug_str:00000000000006ee .LASF206
     /tmp/ccgxMJ4d.s:5148   .debug_loc:0000000000000939 .LLST7
     /tmp/ccgxMJ4d.s:1079   .text:0000000000000314 .LVL83
     /tmp/ccgxMJ4d.s:466    .text:000000000000011c .LBB132
     /tmp/ccgxMJ4d.s:481    .text:000000000000012c .LBE132
     /tmp/ccgxMJ4d.s:5155   .debug_loc:000000000000095c .LLST6
     /tmp/ccgxMJ4d.s:480    .text:000000000000012c .LVL8
     /tmp/ccgxMJ4d.s:127    .text:0000000000000084 .LBB114
     /tmp/ccgxMJ4d.s:142    .text:0000000000000090 .LBE114
     /tmp/ccgxMJ4d.s:128    .text:0000000000000084 .LBB115
GAS LISTING /tmp/ccgxMJ4d.s 			page 46


     /tmp/ccgxMJ4d.s:141    .text:0000000000000090 .LBE115
     /tmp/ccgxMJ4d.s:148    .text:0000000000000098 .LBB116
     /tmp/ccgxMJ4d.s:163    .text:00000000000000a4 .LBE116
     /tmp/ccgxMJ4d.s:149    .text:0000000000000098 .LBB117
     /tmp/ccgxMJ4d.s:162    .text:00000000000000a4 .LBE117
     /tmp/ccgxMJ4d.s:682    .text:00000000000001c8 .LBB209
     /tmp/ccgxMJ4d.s:691    .text:00000000000001d0 .LBE209
     /tmp/ccgxMJ4d.s:5162   .debug_loc:000000000000097f .LLST33
     /tmp/ccgxMJ4d.s:5170   .debug_loc:00000000000009a3 .LLST34
     /tmp/ccgxMJ4d.s:527    .text:0000000000000144 .LBB280
     /tmp/ccgxMJ4d.s:538    .text:0000000000000148 .LBE280
     /tmp/ccgxMJ4d.s:5177   .debug_loc:00000000000009c6 .LLST44
     /tmp/ccgxMJ4d.s:543    .text:000000000000014c .LBB282
     /tmp/ccgxMJ4d.s:555    .text:0000000000000150 .LBE282
     /tmp/ccgxMJ4d.s:5184   .debug_loc:00000000000009e9 .LLST45
     /tmp/ccgxMJ4d.s:671    .text:00000000000001b8 .LVL30
     /tmp/ccgxMJ4d.s:695    .text:00000000000001d8 .LVL35
     /tmp/ccgxMJ4d.s:1153   .text:0000000000000360 .LBB104
     /tmp/ccgxMJ4d.s:1231   .text:00000000000003a4 .LBE104
     /tmp/ccgxMJ4d.s:5687   .debug_str:0000000000000b00 .LASF207
     /tmp/ccgxMJ4d.s:1155   .text:0000000000000360 .LBB105
     /tmp/ccgxMJ4d.s:1170   .text:000000000000036c .LBE105
     /tmp/ccgxMJ4d.s:1156   .text:0000000000000360 .LBB106
     /tmp/ccgxMJ4d.s:1169   .text:000000000000036c .LBE106
     /tmp/ccgxMJ4d.s:1174   .text:0000000000000370 .LBB107
     /tmp/ccgxMJ4d.s:1189   .text:000000000000037c .LBE107
     /tmp/ccgxMJ4d.s:1175   .text:0000000000000370 .LBB108
     /tmp/ccgxMJ4d.s:1188   .text:000000000000037c .LBE108
     /tmp/ccgxMJ4d.s:1203   .text:0000000000000394 .LBB109
     /tmp/ccgxMJ4d.s:1214   .text:0000000000000398 .LBE109
     /tmp/ccgxMJ4d.s:5191   .debug_loc:0000000000000a0c .LLST4
     /tmp/ccgxMJ4d.s:1219   .text:000000000000039c .LBB111
     /tmp/ccgxMJ4d.s:1230   .text:00000000000003a4 .LBE111
     /tmp/ccgxMJ4d.s:1198   .text:0000000000000390 .LVL90
     /tmp/ccgxMJ4d.s:77     .text:0000000000000040 .LBB94
     /tmp/ccgxMJ4d.s:93     .text:000000000000004c .LBE94
     /tmp/ccgxMJ4d.s:78     .text:0000000000000040 .LBB95
     /tmp/ccgxMJ4d.s:92     .text:000000000000004c .LBE95
     /tmp/ccgxMJ4d.s:1108   .text:000000000000031c .LBB99
     /tmp/ccgxMJ4d.s:1120   .text:0000000000000324 .LBE99
     /tmp/ccgxMJ4d.s:5198   .debug_loc:0000000000000a2f .LLST2
     /tmp/ccgxMJ4d.s:1141   .text:0000000000000354 .LBB102
     /tmp/ccgxMJ4d.s:1148   .text:0000000000000358 .LBE102
     /tmp/ccgxMJ4d.s:5206   .debug_loc:0000000000000a53 .LLST3
     /tmp/ccgxMJ4d.s:117    .text:0000000000000080 .LVL3
     /tmp/ccgxMJ4d.s:1130   .text:0000000000000340 .LVL86
     /tmp/ccgxMJ4d.s:1134   .text:0000000000000348 .LVL87
     /tmp/ccgxMJ4d.s:5675   .debug_str:0000000000000aca .LASF208
     /tmp/ccgxMJ4d.s:10     .text:0000000000000000 .LFB48
     /tmp/ccgxMJ4d.s:55     .text:0000000000000028 .LFE48
     /tmp/ccgxMJ4d.s:22     .text:000000000000000c .LBB92
     /tmp/ccgxMJ4d.s:35     .text:0000000000000014 .LBE92
     /tmp/ccgxMJ4d.s:5213   .debug_loc:0000000000000a76 .LLST0
     /tmp/ccgxMJ4d.s:5715   .debug_str:0000000000000bc1 .LASF210
     /tmp/ccgxMJ4d.s:5317   .debug_str:0000000000000000 .LASF212
     /tmp/ccgxMJ4d.s:5447   .debug_str:000000000000039b .LASF213
     /tmp/ccgxMJ4d.s:5723   .debug_str:0000000000000bf8 .LASF214
GAS LISTING /tmp/ccgxMJ4d.s 			page 47


     /tmp/ccgxMJ4d.s:5493   .debug_str:000000000000059d .LASF215
     /tmp/ccgxMJ4d.s:5511   .debug_str:0000000000000627 .LASF216
     /tmp/ccgxMJ4d.s:5429   .debug_str:000000000000031e .LASF217
     /tmp/ccgxMJ4d.s:91     .text:000000000000004c .LVL2
     /tmp/ccgxMJ4d.s:122    .text:0000000000000084 .LVL4
     /tmp/ccgxMJ4d.s:178    .text:00000000000000b0 .LVL6
     /tmp/ccgxMJ4d.s:483    .text:0000000000000130 .LVL9
     /tmp/ccgxMJ4d.s:571    .text:0000000000000168 .LVL17
     /tmp/ccgxMJ4d.s:601    .text:000000000000017c .LVL20
     /tmp/ccgxMJ4d.s:664    .text:00000000000001b0 .LVL29
     /tmp/ccgxMJ4d.s:673    .text:00000000000001bc .LVL31
     /tmp/ccgxMJ4d.s:697    .text:00000000000001dc .LVL36
     /tmp/ccgxMJ4d.s:721    .text:00000000000001fc .LVL41
     /tmp/ccgxMJ4d.s:821    .text:0000000000000244 .LVL51
     /tmp/ccgxMJ4d.s:849    .text:0000000000000254 .LVL54
     /tmp/ccgxMJ4d.s:860    .text:000000000000025c .LVL55
     /tmp/ccgxMJ4d.s:870    .text:000000000000026c .LVL57
     /tmp/ccgxMJ4d.s:898    .text:000000000000027c .LVL60
     /tmp/ccgxMJ4d.s:909    .text:0000000000000284 .LVL61
     /tmp/ccgxMJ4d.s:919    .text:0000000000000294 .LVL63
     /tmp/ccgxMJ4d.s:947    .text:00000000000002a4 .LVL66
     /tmp/ccgxMJ4d.s:958    .text:00000000000002ac .LVL67
     /tmp/ccgxMJ4d.s:968    .text:00000000000002bc .LVL69
     /tmp/ccgxMJ4d.s:1003   .text:00000000000002d0 .LVL73
     /tmp/ccgxMJ4d.s:1014   .text:00000000000002d8 .LVL74
     /tmp/ccgxMJ4d.s:1024   .text:00000000000002e8 .LVL76
     /tmp/ccgxMJ4d.s:1052   .text:00000000000002f8 .LVL79
     /tmp/ccgxMJ4d.s:1063   .text:0000000000000300 .LVL80
     /tmp/ccgxMJ4d.s:1071   .text:000000000000030c .LVL82
     /tmp/ccgxMJ4d.s:1089   .text:000000000000031c .LVL84
     /tmp/ccgxMJ4d.s:173    .text:00000000000000ac .LVL5
     /tmp/ccgxMJ4d.s:679    .text:00000000000001c4 .LVL32
     /tmp/ccgxMJ4d.s:715    .text:00000000000001ec .LVL39
     /tmp/ccgxMJ4d.s:842    .text:000000000000024c .LVL53
     /tmp/ccgxMJ4d.s:891    .text:0000000000000274 .LVL59
     /tmp/ccgxMJ4d.s:940    .text:000000000000029c .LVL65
     /tmp/ccgxMJ4d.s:996    .text:00000000000002c8 .LVL72
     /tmp/ccgxMJ4d.s:1045   .text:00000000000002f0 .LVL78
     /tmp/ccgxMJ4d.s:506    .text:0000000000000134 .LVL10
     /tmp/ccgxMJ4d.s:518    .text:0000000000000140 .LVL12
     /tmp/ccgxMJ4d.s:586    .text:000000000000016c .LVL18
     /tmp/ccgxMJ4d.s:612    .text:0000000000000180 .LVL21
     /tmp/ccgxMJ4d.s:619    .text:0000000000000184 .LVL22
     /tmp/ccgxMJ4d.s:626    .text:0000000000000188 .LVL23
     /tmp/ccgxMJ4d.s:633    .text:000000000000018c .LVL24
     /tmp/ccgxMJ4d.s:642    .text:0000000000000198 .LVL26
     /tmp/ccgxMJ4d.s:648    .text:00000000000001a0 .LVL27
     /tmp/ccgxMJ4d.s:658    .text:00000000000001a8 .LVL28
     /tmp/ccgxMJ4d.s:708    .text:00000000000001e0 .LVL37
     /tmp/ccgxMJ4d.s:713    .text:00000000000001e4 .LVL38
     /tmp/ccgxMJ4d.s:732    .text:0000000000000200 .LVL42
     /tmp/ccgxMJ4d.s:739    .text:0000000000000204 .LVL43
     /tmp/ccgxMJ4d.s:799    .text:000000000000022c .LVL48
     /tmp/ccgxMJ4d.s:805    .text:0000000000000234 .LVL49
     /tmp/ccgxMJ4d.s:815    .text:000000000000023c .LVL50
     /tmp/ccgxMJ4d.s:792    .text:0000000000000228 .LVL47
     /tmp/ccgxMJ4d.s:779    .text:0000000000000218 .LVL45
GAS LISTING /tmp/ccgxMJ4d.s 			page 48


     /tmp/ccgxMJ4d.s:787    .text:0000000000000224 .LVL46
     /tmp/ccgxMJ4d.s:833    .text:0000000000000248 .LVL52
     /tmp/ccgxMJ4d.s:882    .text:0000000000000270 .LVL58
     /tmp/ccgxMJ4d.s:931    .text:0000000000000298 .LVL64
     /tmp/ccgxMJ4d.s:980    .text:00000000000002c0 .LVL70
     /tmp/ccgxMJ4d.s:987    .text:00000000000002c4 .LVL71
     /tmp/ccgxMJ4d.s:1036   .text:00000000000002ec .LVL77
     /tmp/ccgxMJ4d.s:474    .text:0000000000000120 .LVL7
     /tmp/ccgxMJ4d.s:681    .text:00000000000001c8 .LVL33
     /tmp/ccgxMJ4d.s:689    .text:00000000000001d0 .LVL34
     /tmp/ccgxMJ4d.s:526    .text:0000000000000144 .LVL13
     /tmp/ccgxMJ4d.s:535    .text:0000000000000148 .LVL14
     /tmp/ccgxMJ4d.s:542    .text:000000000000014c .LVL15
     /tmp/ccgxMJ4d.s:551    .text:0000000000000150 .LVL16
     /tmp/ccgxMJ4d.s:1202   .text:0000000000000394 .LVL91
     /tmp/ccgxMJ4d.s:1211   .text:0000000000000398 .LVL92
     /tmp/ccgxMJ4d.s:1117   .text:0000000000000324 .LVL85
     /tmp/ccgxMJ4d.s:1140   .text:0000000000000354 .LVL88
     /tmp/ccgxMJ4d.s:1146   .text:0000000000000358 .LVL89
     /tmp/ccgxMJ4d.s:21     .text:000000000000000c .LVL0
     /tmp/ccgxMJ4d.s:32     .text:0000000000000014 .LVL1
     /tmp/ccgxMJ4d.s:1246   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccgxMJ4d.s:125    .text:0000000000000084 .LBB113
     /tmp/ccgxMJ4d.s:181    .text:00000000000000b4 .LBE113
     /tmp/ccgxMJ4d.s:185    .text:00000000000000b4 .LBB286
     /tmp/ccgxMJ4d.s:192    .text:00000000000000bc .LBE286
     /tmp/ccgxMJ4d.s:196    .text:00000000000000bc .LBB287
     /tmp/ccgxMJ4d.s:205    .text:00000000000000c4 .LBE287
     /tmp/ccgxMJ4d.s:209    .text:00000000000000c4 .LBB288
     /tmp/ccgxMJ4d.s:220    .text:00000000000000cc .LBE288
     /tmp/ccgxMJ4d.s:224    .text:00000000000000cc .LBB289
     /tmp/ccgxMJ4d.s:237    .text:00000000000000d4 .LBE289
     /tmp/ccgxMJ4d.s:241    .text:00000000000000d4 .LBB290
     /tmp/ccgxMJ4d.s:256    .text:00000000000000dc .LBE290
     /tmp/ccgxMJ4d.s:260    .text:00000000000000dc .LBB291
     /tmp/ccgxMJ4d.s:277    .text:00000000000000e4 .LBE291
     /tmp/ccgxMJ4d.s:281    .text:00000000000000e4 .LBB292
     /tmp/ccgxMJ4d.s:300    .text:00000000000000ec .LBE292
     /tmp/ccgxMJ4d.s:304    .text:00000000000000ec .LBB293
     /tmp/ccgxMJ4d.s:325    .text:00000000000000f4 .LBE293
     /tmp/ccgxMJ4d.s:329    .text:00000000000000f4 .LBB294
     /tmp/ccgxMJ4d.s:352    .text:00000000000000fc .LBE294
     /tmp/ccgxMJ4d.s:356    .text:00000000000000fc .LBB295
     /tmp/ccgxMJ4d.s:381    .text:0000000000000104 .LBE295
     /tmp/ccgxMJ4d.s:385    .text:0000000000000104 .LBB296
     /tmp/ccgxMJ4d.s:412    .text:000000000000010c .LBE296
     /tmp/ccgxMJ4d.s:416    .text:000000000000010c .LBB297
     /tmp/ccgxMJ4d.s:445    .text:0000000000000114 .LBE297
     /tmp/ccgxMJ4d.s:449    .text:0000000000000114 .LBB298
     /tmp/ccgxMJ4d.s:556    .text:0000000000000150 .LBE298
     /tmp/ccgxMJ4d.s:575    .text:0000000000000168 .LBB299
     /tmp/ccgxMJ4d.s:750    .text:0000000000000204 .LBE299
     /tmp/ccgxMJ4d.s:755    .text:0000000000000204 .LBB300
     /tmp/ccgxMJ4d.s:1104   .text:000000000000031c .LBE300
     /tmp/ccgxMJ4d.s:1028   .text:00000000000002e8 .LBB135
     /tmp/ccgxMJ4d.s:1061   .text:00000000000002fc .LBE135
     /tmp/ccgxMJ4d.s:1065   .text:0000000000000300 .LBB138
GAS LISTING /tmp/ccgxMJ4d.s 			page 49


     /tmp/ccgxMJ4d.s:1073   .text:000000000000030c .LBE138
     /tmp/ccgxMJ4d.s:972    .text:00000000000002bc .LBB142
     /tmp/ccgxMJ4d.s:1012   .text:00000000000002d4 .LBE142
     /tmp/ccgxMJ4d.s:1016   .text:00000000000002d8 .LBB145
     /tmp/ccgxMJ4d.s:1026   .text:00000000000002e8 .LBE145
     /tmp/ccgxMJ4d.s:923    .text:0000000000000294 .LBB150
     /tmp/ccgxMJ4d.s:956    .text:00000000000002a8 .LBE150
     /tmp/ccgxMJ4d.s:960    .text:00000000000002ac .LBB153
     /tmp/ccgxMJ4d.s:970    .text:00000000000002bc .LBE153
     /tmp/ccgxMJ4d.s:874    .text:000000000000026c .LBB159
     /tmp/ccgxMJ4d.s:907    .text:0000000000000280 .LBE159
     /tmp/ccgxMJ4d.s:911    .text:0000000000000284 .LBB162
     /tmp/ccgxMJ4d.s:921    .text:0000000000000294 .LBE162
     /tmp/ccgxMJ4d.s:825    .text:0000000000000244 .LBB169
     /tmp/ccgxMJ4d.s:858    .text:0000000000000258 .LBE169
     /tmp/ccgxMJ4d.s:862    .text:000000000000025c .LBB172
     /tmp/ccgxMJ4d.s:872    .text:000000000000026c .LBE172
     /tmp/ccgxMJ4d.s:724    .text:00000000000001fc .LBB180
     /tmp/ccgxMJ4d.s:742    .text:0000000000000204 .LBE180
     /tmp/ccgxMJ4d.s:763    .text:0000000000000204 .LBB188
     /tmp/ccgxMJ4d.s:813    .text:0000000000000238 .LBE188
     /tmp/ccgxMJ4d.s:817    .text:000000000000023c .LBB189
     /tmp/ccgxMJ4d.s:823    .text:0000000000000244 .LBE189
     /tmp/ccgxMJ4d.s:604    .text:000000000000017c .LBB234
     /tmp/ccgxMJ4d.s:656    .text:00000000000001a4 .LBE234
     /tmp/ccgxMJ4d.s:660    .text:00000000000001a8 .LBB235
     /tmp/ccgxMJ4d.s:666    .text:00000000000001b0 .LBE235

UNDEFINED SYMBOLS
console_handler
__putc
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN3TCB12createThreadEPFvPvEPmS0_
_ZN3TCB8dispatchEv
_ZN3TCB7runningE
_ZN3TCB17addToSleepingListEPS_i
_ZN5mySem4waitEv
_ZN5mySem5closeEv
_ZN5mySem6signalEv
_ZN5mySem16addToWaitingListEm
_ZN5mySem7trywaitEv
__getc
_ZN3TCB16timeSliceCounterE
_ZN3TCB17checkSleepingListEv
_ZN5mySem17checkAllTimedSemsEv
